syntax = "proto3";

package io.restorecommerce.currency;

import "io/restorecommerce/resource_base.proto";
import "io/restorecommerce/meta.proto";
import "io/restorecommerce/auth.proto";
import "io/restorecommerce/status.proto";
import "io/restorecommerce/options.proto";
import "google/protobuf/timestamp.proto";

/*
* Microservice definition.
*/
service CurrencyService {
  rpc Read (io.restorecommerce.resourcebase.ReadRequest) returns (CurrencyListResponse) {
    option (io.restorecommerce.options.is_query) = true;
  };
  rpc Create (CurrencyList) returns (CurrencyListResponse);
  rpc Delete (io.restorecommerce.resourcebase.DeleteRequest) returns (io.restorecommerce.resourcebase.DeleteResponse);
  rpc Update (CurrencyList) returns (CurrencyListResponse);
  rpc Upsert (CurrencyList) returns (CurrencyListResponse);
}

enum SymbolAlignment {
  surfix = 0;
  prefix = 1;
}

message CurrencyList {
  repeated Currency items = 1;
  optional uint32 total_count = 2;
  optional io.restorecommerce.auth.Subject subject = 3;
}

message CurrencyListResponse {
  repeated CurrencyResponse items = 1;
  optional uint32 total_count = 2;
  optional io.restorecommerce.status.OperationStatus operation_status = 3;
}

message CurrencyResponse {
  optional Currency payload = 1;
  optional io.restorecommerce.status.Status status = 2;
}

message Currency {
  optional string id = 1;
  optional io.restorecommerce.meta.Meta meta = 2;
  optional string name = 3;
  optional string symbol = 4;
  repeated string country_ids = 5 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.country.Country",
      target_service: "master_data",
      target_sub_service: "country",
      target_method: "Read",
      field_name: "countries",
    }
  ];
  /*
  * For custom exchange rates beyond market.
  * Regular rates should be retrived from any API.
  */
  repeated ExchangeRate custom_exchange_rates = 6;
  optional int32 precision = 7;
  optional string code = 8;
}

message ExchangeRate {
  optional string to_currency_id = 1;
  optional double rate = 3;
  optional double expenses = 4; //fees
  optional double amount = 5; // leave empty == 1.0
}
