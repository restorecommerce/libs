syntax = "proto3";

package io.restorecommerce.fulfillment;

import "google/protobuf/any.proto";
import "io/restorecommerce/reference.proto";
import "io/restorecommerce/resource_base.proto";
import "io/restorecommerce/auth.proto";
import "io/restorecommerce/status.proto";
import "io/restorecommerce/meta.proto";
import "io/restorecommerce/address.proto";
import "io/restorecommerce/country.proto";
import "io/restorecommerce/product.proto";
import "io/restorecommerce/options.proto";
import "io/restorecommerce/price.proto";
import "io/restorecommerce/amount.proto";
import "io/restorecommerce/invoice.proto";
import "google/protobuf/timestamp.proto";

// Used by resolvers
import "io/restorecommerce/user.proto";
import "io/restorecommerce/customer.proto";
import "io/restorecommerce/shop.proto";

/**
Microservice definition.
*/
service FulfillmentService {
  /**
   Returns a list of shipment IDs.
   */
  rpc Read (io.restorecommerce.resourcebase.ReadRequest) returns (FulfillmentListResponse) {
    option (io.restorecommerce.options.is_query) = true;
  };

  /**
  Creates fulfillment orders
  */
  rpc Create (FulfillmentList) returns (FulfillmentListResponse);

  /**
  Updates fulfillment orders unless Status is beyond Submit
  */
  rpc Update (FulfillmentList) returns (FulfillmentListResponse);

  /**
  Creates or Updates fulfillment orders unless Status is beyond Submit
  */
  rpc Upsert (FulfillmentList) returns (FulfillmentListResponse);

  /**
  Evaluate fulfillment for correctness
  */
  rpc Evaluate (FulfillmentList) returns (FulfillmentListResponse);

  /**
  Creates, Submits and Updates fulfillment orders against API
  */
  rpc Submit (FulfillmentList) returns (FulfillmentListResponse);

  /**
  Track a batch of fulfillments
  */
  rpc Track (FulfillmentIdList) returns (FulfillmentListResponse);

  /**
  Withdraw a batch of fulfillments and request for cancelation
  */
  rpc Withdraw (FulfillmentIdList) returns (FulfillmentListResponse);

  /**
  Cancel a batch of fulfillments
  */
  rpc Cancel (FulfillmentIdList) returns (FulfillmentListResponse);

  /**
  Delete a batch of fulfillments from the database
  */
  rpc Delete (io.restorecommerce.resourcebase.DeleteRequest) returns (io.restorecommerce.resourcebase.DeleteResponse);

  /**
  Requires Invoice Service
  */
  rpc CreateInvoice (FulfillmentInvoiceRequestList) returns (io.restorecommerce.invoice.InvoiceListResponse);

  /**
  Requires Invoice Service
  */
  rpc TriggerInvoice (FulfillmentInvoiceRequestList) returns (io.restorecommerce.status.StatusListResponse);
}

enum FulfillmentState {
  PENDING = 0;
  INVALID = 1;
  SUBMITTED = 2;
  IN_TRANSIT = 3;
  COMPLETED = 4;
  WITHDRAWN = 5;
  CANCELLED = 6;
  FAILED = 7;
}

message Item {
  optional string product_id = 1;
  optional string variant_id = 2;
  optional int32 quantity = 3;
  optional io.restorecommerce.product.Package package = 4;
}

message Parcel {
  optional string id = 1;
  optional string product_id = 2 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.fulfillment_product.FulfillmentProduct",
      target_service: "master_data",
      target_sub_service: "fulfillment_product",
      target_method: "Read",
      field_name: "product",
    }
  ];
  optional string variant_id = 3;
  repeated Item items = 4;
  optional io.restorecommerce.price.Price price = 5;
  optional io.restorecommerce.amount.Amount amount = 6;
  optional io.restorecommerce.product.Package package = 8;
}

message Label {
  oneof type {
    string url = 1;
    string pdf = 2;
    string png = 3;
  }
  optional string parcel_id = 4;
  optional string shipment_number = 5; //filled on Order
  optional State state = 6; //update by Track
  optional io.restorecommerce.status.Status status = 7; //API status
}

message Packaging {
  repeated Parcel parcels = 1;
  optional io.restorecommerce.address.ShippingAddress sender = 2;
  optional io.restorecommerce.address.ShippingAddress recipient = 3;
  optional string notify = 4;
  optional string export_type = 5;
  optional string export_description = 6;
  optional string invoice_number = 7;
}

message Event {
  optional google.protobuf.Timestamp timestamp = 1;
  optional string location = 2;
  optional google.protobuf.Any details = 3;
  optional io.restorecommerce.status.Status status = 4;
}

message Tracking {
  optional string shipment_number = 1;
  repeated Event events = 3;
  optional google.protobuf.Any details = 4;
  optional io.restorecommerce.status.Status status = 5;
}

/**
This is the message of how it get stored to the database
*/
message Fulfillment {
  option (restorecommerce.options.kafka_subscriber) = {
    plural: "fulfillments"
    topic: "io.restorecommerce.fulfillment.resource"
    created: "fulfillmentCreated"
    updated: "fulfillmentUpdated"
    deleted: "fulfillmentDeleted"
  };

  optional string id = 1;
  optional io.restorecommerce.meta.Meta meta = 2;
  optional string user_id = 3 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.user.User",
      target_service: "identity",
      target_sub_service: "user",
      target_method: "Read",
      field_name: "user",
    }
  ];
  optional string customer_id = 4 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.customer.Customer",
      target_service: "master_data",
      target_sub_service: "customer",
      target_method: "Read",
      field_name: "customer",
    }
  ];
  optional string shop_id = 5 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.shop.Shop",
      target_service: "master_data",
      target_sub_service: "shop",
      target_method: "Read",
      field_name: "shop",
    }
  ];
  repeated io.restorecommerce.reference.Reference references = 6;
  optional Packaging packaging = 7;
  repeated Label labels = 8; //set by service
  repeated Tracking trackings = 9; //set by service
  repeated io.restorecommerce.amount.Amount total_amounts = 10; //set by service
  optional FulfillmentState fulfillment_state = 11; //set by service
}

message FulfillmentList {
  repeated Fulfillment items = 1;
  optional uint32 total_count = 2;
  io.restorecommerce.auth.Subject subject = 3;
}

message FulfillmentResponse {
  optional Fulfillment payload = 1;
  optional io.restorecommerce.status.Status status = 2;
}

message FulfillmentListResponse {
  repeated FulfillmentResponse items = 1;
  optional uint32 total_count = 2;
  optional io.restorecommerce.status.OperationStatus operation_status = 3;
}

message FulfillmentId {
  optional string id = 1;
  repeated string shipment_numbers = 2; //optional
  optional google.protobuf.Any options = 3;
}

message FulfillmentIdList {
  repeated FulfillmentId items = 1;
  optional uint32 total_count = 2;
  optional io.restorecommerce.auth.Subject subject = 3;
}

message Deleted {
  optional string id = 1;
}

message FulfillmentInvoiceSection {
  optional string fulfillment_id = 1;
  repeated string selected_parcels = 2; // selects all on empty
}

message FulfillmentInvoiceRequest {
  optional string invoice_number = 1; // if given
  repeated string payment_hints = 2;
  repeated FulfillmentInvoiceSection sections = 3;
}

message FulfillmentInvoiceRequestList {
  repeated FulfillmentInvoiceRequest items = 1;
  optional uint32 total_count = 2;
  optional io.restorecommerce.auth.Subject subject = 3;
}