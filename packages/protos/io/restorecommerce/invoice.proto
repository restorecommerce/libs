syntax = "proto3";

package io.restorecommerce.invoice;

import "google/protobuf/any.proto";
import "io/restorecommerce/resource_base.proto";
import "io/restorecommerce/meta.proto";
import "io/restorecommerce/organization.proto";
import "io/restorecommerce/auth.proto";
import "io/restorecommerce/status.proto";
import "io/restorecommerce/options.proto";
import "io/restorecommerce/address.proto";
import "io/restorecommerce/amount.proto";
import "io/restorecommerce/price.proto";
import "io/restorecommerce/file.proto";
import "io/restorecommerce/reference.proto";
import "io/restorecommerce/attribute.proto";

// Used by resolvers
import "io/restorecommerce/user.proto";
import "io/restorecommerce/customer.proto";
import "io/restorecommerce/shop.proto";
import "google/protobuf/timestamp.proto";
import "io/restorecommerce/product.proto";

/*
* Microservice definition.
*/
service InvoiceService {
  rpc Read (io.restorecommerce.resourcebase.ReadRequest) returns (InvoiceListResponse) {
    option (io.restorecommerce.options.is_query) = true;
  };
  rpc Create (InvoiceList) returns (InvoiceListResponse);
  rpc Update (InvoiceList) returns (InvoiceListResponse);
  rpc Upsert (InvoiceList) returns (InvoiceListResponse);
  rpc Delete (io.restorecommerce.resourcebase.DeleteRequest) returns (io.restorecommerce.resourcebase.DeleteResponse);

  /*
  * Evaluates and (re-)Renders invoices as PDF to ostorage. (creates if not exist, updates if id is given)
  */
  rpc Render (InvoiceList) returns (InvoiceListResponse);
  
  /*
  * Mark invoices as withdrawn
  */
  rpc Withdraw (InvoiceIdList) returns (InvoiceListResponse);

  /*
  * Triggers notification-srv (sends invoice per email for instance) 
  */
  rpc Send (InvoiceIdList) returns (io.restorecommerce.status.StatusListResponse);

  /*
  * Generate an incremented invoice number
  */
  rpc GenerateInvoiceNumber(RequestInvoiceNumber) returns (InvoiceNumberResponse);
}

enum PaymentState {
  UNPAYED = 0;
  PAYED = 1;
}

message RequestInvoiceNumber {
  optional string shop_id = 1;
  google.protobuf.Any context = 2;
  io.restorecommerce.auth.Subject subject = 3;
}

message InvoiceNumberResponse {
 string invoice_number = 1;
}

message Deleted {
  string id = 1;
}

message InvoiceList {
  repeated Invoice items = 1;
  optional uint32 total_count = 2;
  io.restorecommerce.auth.Subject subject = 3;
}

message InvoiceListResponse {
  repeated InvoiceResponse items = 1;
  uint32 total_count = 2;
  io.restorecommerce.status.OperationStatus operation_status = 3;
}

message InvoiceResponse {
  Invoice payload = 1;
  io.restorecommerce.status.Status status = 2;
}

message InvoiceId {
  optional string id = 1;
  repeated string channel_ids = 2;
  optional google.protobuf.Any options = 3;
  optional io.restorecommerce.auth.Subject subject = 4;
}

message InvoiceIdList {
  repeated InvoiceId items = 1;
  optional uint32 total_count = 2;
  io.restorecommerce.auth.Subject subject = 3;
}

/*
* The Invoice recource, stored in DB.
*/
message Invoice {
  option (restorecommerce.options.kafka_subscriber) = {
    plural: "invoices"
    topic: "io.restorecommerce.invoice.resource"
    created: "invoiceCreated"
    updated: "invoiceUpdated"
    deleted: "invoiceDeleted"
  };

  optional string id = 1;
  optional io.restorecommerce.meta.Meta meta = 2;
  optional string invoice_number = 3;
  repeated io.restorecommerce.reference.Reference references = 4; 
  optional string user_id = 5 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.user.User",
      target_service: "identity",
      target_sub_service: "user",
      target_method: "Read",
      field_name: "user",
    }
  ];
  optional string customer_id = 6 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.customer.Customer",
      target_service: "resource",
      target_sub_service: "customer",
      target_method: "Read",
      field_name: "customer",
    }
  ]; // customer_number ref. to recipent orga
  optional string shop_id = 7 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.shop.Shop",
      target_service: "resource",
      target_sub_service: "shop",
      target_method: "Read",
      field_name: "shop",
    }
  ]; // shop_number --- ref. to sender orga
  optional google.protobuf.Timestamp timestamp = 8;
  optional PaymentState payment_state = 9;
  optional io.restorecommerce.address.BillingAddress sender = 10;
  optional io.restorecommerce.address.BillingAddress recipient = 11;
  repeated Section sections = 12;
  repeated io.restorecommerce.amount.Amount total_amounts = 13;
  repeated string payment_hints = 14;
  repeated io.restorecommerce.file.File documents = 15; // url to rendered PDFs
  optional google.protobuf.Timestamp from_date = 16; // value performance from date
  optional google.protobuf.Timestamp to_date = 17; // value performance to date
  optional bool sent = 18;
  optional bool withdrawn = 19;
  optional string url = 20; // URL for uploaded file on OSS
}

message Section {
  optional string id = 1;
  optional string customer_remark = 2;
  repeated Position positions = 3;
  repeated io.restorecommerce.amount.Amount amounts = 5; // repeated in case of multiple currencies?
}

message Position {
  optional string id = 1;
  oneof item_type {
    ProductItem product_item = 2;
    FulfillmentItem fultillment_item = 3;
    ManualItem manual_item = 4;
  }
  optional io.restorecommerce.price.Price unit_price = 5;
  optional uint32 quantity = 6;
  optional io.restorecommerce.amount.Amount amount = 7;
  optional double contract_start_date = 8; // if there is any contract associated with product
  repeated io.restorecommerce.attribute.Attribute attributes = 9;
}

message ProductItem {
  optional string product_id = 1 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.product.Product",
      target_service: "catalog",
      target_sub_service: "product",
      target_method: "Read",
      field_name: "product",
    }
  ];
  optional string variant_id = 2;
}

message FulfillmentItem {
  optional string product_id = 1 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.fulfillment_product.FulfillmentProduct",
      target_service: "fulfillment",
      target_sub_service: "fulfillment_product",
      target_method: "Read",
      field_name: "product",
    }
  ];
  optional string variant_id = 2;
}

message ManualItem {
  optional string stock_keeping_unit = 1;
  optional string name = 2;
  optional string descritpion = 3;
}