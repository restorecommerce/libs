syntax = "proto3";

package io.restorecommerce.invoice;

import "io/restorecommerce/resource_base.proto";
import "io/restorecommerce/meta.proto";
import "io/restorecommerce/organization.proto";
import "io/restorecommerce/auth.proto";
import "google/protobuf/any.proto";
import "io/restorecommerce/status.proto";
import "io/restorecommerce/options.proto";

// Used by resolvers
import "io/restorecommerce/customer.proto";

/*
* Microservice definition.
*/
service InvoiceService {
  rpc Read (io.restorecommerce.resourcebase.ReadRequest) returns (InvoiceListResponse) {
    option (io.restorecommerce.options.is_query) = true;
  };
  rpc Create (InvoiceList) returns (InvoiceListResponse);
  rpc Delete (io.restorecommerce.resourcebase.DeleteRequest) returns (io.restorecommerce.resourcebase.DeleteResponse);
  rpc Update (InvoiceList) returns (InvoiceListResponse);
  rpc Upsert (InvoiceList) returns (InvoiceListResponse);
  rpc GenerateInvoiceNumber(RequestInvoiceNumber) returns (InvoiceNumberResponse);
}

message RequestInvoiceNumber {
 google.protobuf.Any context = 1;
 io.restorecommerce.auth.Subject subject = 3;
}

message InvoiceNumberResponse {
 string invoice_no = 1;
}

message Deleted {
  string id = 1;
}

/*
* For multiple invoices
*/
message InvoiceList {
  repeated Invoice items = 1;
  optional uint32 total_count = 2;
  io.restorecommerce.auth.Subject subject = 3;
}

message InvoiceListResponse {
  repeated InvoiceResponse items = 1;
  uint32 total_count = 2;
  io.restorecommerce.status.OperationStatus operation_status = 3;
}

message InvoiceResponse {
  Invoice payload = 1;
  io.restorecommerce.status.Status status = 2;
}

/*
* A simple invoice.
*/
message Invoice {
  optional string id = 1;
  optional io.restorecommerce.meta.Meta meta = 2;
  optional string timestamp = 4;
  optional string customer_number = 5;
  optional string payment_status = 6;
  optional double total_amount = 7;
  optional double net_amount = 8;
  optional double vat_amount = 9; // difference between net and total
  optional string document = 10;
  optional string invoice_number = 11;
  optional string customer_remark = 12;
  repeated InvoicePositions invoice_positions = 13;
  repeated string order_ids = 14 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.order.Order",
      target_service: "ordering-srv",
      target_sub_service: "order",
      target_method: "Read",
      field_name: "orders",
    }
  ];
}

message InvoicePositions {
  optional string id = 1; // contract or customer identifier
  repeated InvoicePosition invoice_positions = 2;
  optional RecipientCustomer recipient_customer = 3;
  optional BillingAddress recipient_billing_address = 4;
  optional BillingAddress sender_billing_address = 5;
  optional io.restorecommerce.organization.Organization recipient_organization = 6;
  optional io.restorecommerce.organization.Organization sender_organization = 7;
  optional google.protobuf.Any payment_method_details = 8;
  optional string invoice_no = 9; // optional invoice number if not it will be generated by service
  optional double from_date = 10; // value performance from date
  optional double to_date = 11; // value performance to date
}

message RecipientCustomer {
  optional string customer_id = 1; // customer id - used to store the resource in DB
  optional string customer_number = 2; // displayed in invoice
}

message BillingAddress {
  optional string email = 1;
  optional string website = 2;
  optional string street = 3;
  optional string building_number = 4;
  optional string postcode = 5;
  optional string region = 6;
  optional string country_name = 7;
  optional string telephone = 9;
  optional string timezone = 10;
  optional string economic_area = 11;
  optional string locality = 12;
  optional string organization_name = 13;
}

message InvoicePosition {
  optional string currency = 1;
  repeated InvoiceRow invoiceRows = 2;
  optional InvoicePrice totalPrice = 3;
}

message InvoiceRow {
  optional string product = 1;
  optional double pricePerUnit = 2;
  optional uint32 quantity = 3;
  optional string vat = 4;
  optional double amount = 5;
  optional double contract_start_date = 6; // if there is any contract associated with product
}

message InvoicePrice {
  optional double gross = 1;
  optional double net = 2;
}

message TriggerInvoices {
  repeated string ids = 1; // list of id referring to contract_ids or customer_ids
}
