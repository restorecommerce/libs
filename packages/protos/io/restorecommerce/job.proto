syntax = "proto3";

package io.restorecommerce.job;

import "io/restorecommerce/resource_base.proto";
import "google/protobuf/any.proto";
import "io/restorecommerce/meta.proto";
import "io/restorecommerce/auth.proto";
import "io/restorecommerce/status.proto";
import "io/restorecommerce/options.proto";

/**
 * The microservice for scheduling jobs.
 * Provides CRUD operations.
 */
service JobService {
  rpc Read (JobReadRequest) returns (JobListResponse) {
    option (io.restorecommerce.options.is_query) = true;
  };
  rpc Create (JobList) returns (JobListResponse);
  rpc Delete (io.restorecommerce.resourcebase.DeleteRequest) returns (io.restorecommerce.resourcebase.DeleteResponse);
  rpc Update (JobList) returns (JobListResponse);
  rpc Upsert (JobList) returns (JobListResponse);
}

/**
 * A Kafka event.
 * Send when a job resource got deleted.
 */
message Deleted {
  optional string id = 1;
}

/**
 * A list of jobs.
 */
message JobList {
  repeated Job items = 1;
  optional uint32 total_count = 2;
  optional io.restorecommerce.auth.Subject subject = 3;
}

message JobListResponse {
  repeated JobResponse items = 1;
  optional uint32 total_count = 2;
  optional io.restorecommerce.status.OperationStatus operation_status = 3;
}

message JobResponse {
  optional Job payload = 1;
  optional io.restorecommerce.status.Status status = 2;
}

/**
 * A Job resource
 */
message Job {
  optional string id = 1; // Job ID
  optional string type = 2; // Job type
  optional Data data = 3; // Job-specific data with variable payload
  optional string queue_name = 4; // Queue name to which the job should be added to
  optional string when = 5; // Used to specify the time at which the job is run
  optional JobOptions options = 6; // The job options
}

/**
 * Job Options
 */
message JobOptions {
  enum Priority {
    NORMAL = 0;
    LOW = 10;
    MEDIUM = -5;
    HIGH = -10;
    CRITICAL = -15;
  }

  optional Priority priority = 13; // Job priority
  optional uint32 attempts = 14; // Amount of possible failing runs until job fails
  optional Backoff backoff = 15; // Delay settings between failed job runs
  optional uint32 timeout = 16; // The number of milliseconds after which the job should be fail with a timeout error

  optional Repeat repeat = 20; // Used for periodic jobs
  optional string jobId = 21; // To override the job ID - by default, the job ID is a unique generated by bull
  optional bool removeOnComplete = 22; // If true, removes the job when it successfully completes
}

message Repeat {
  optional uint32 every = 1;
  optional string cron = 2;
  optional string startDate = 3;
  optional string endDate = 4;
  optional uint32 count = 5;
  optional string jobId = 6; // To override the job ID - by default, the job ID is a unique generated by bull
  optional string tz = 7; // time zone
}

// Data which is stored within a job instance
message Data {
  optional google.protobuf.Any payload = 2; // optional variable payload
  optional io.restorecommerce.meta.Meta meta = 3;
  optional string subject_id = 4; // id of job creator
}

/**
 * A scheduled Job.
 * Emitted to Kafka by the scheduling service with event name 'queuedJob' and retreived by a service which processes this job.
 */
message ScheduledJob {
  optional string id = 1; // Job instance ID
  optional string type = 2;
  optional Data data = 3; // Job-specific data with variable payload
  optional string schedule_type = 4; // Type of schedule (ONCE, RECURR, etc)
}

/**
 * A finished scheduled Job.
 * Emitted to Kafka by the service which processed the job with event name 'done' and retrieved by the scheduling service.
 */
message JobDone {
  optional string id = 1; // Job instance ID
  optional string schedule_type = 2; // Type of schedule (ONCE, RECURR, etc)
  optional bool delete_scheduled = 3; // Whether to delete scheduled job
  optional string type = 4; // Job type
  optional google.protobuf.Any result = 5;
}

/**
 * A failed scheduled Job event from the Job Service.
 * Emitted to Kafka by the service which processed the Job and retrieved by the scheduling service.
 */
message JobFailed {
  optional string id = 1; // Job instance ID
  optional string error = 2; // Error message
  optional string schedule_type = 3; // Type of job ex: ONCE, RECURR etc.
  optional string type = 4; // Job type
}

/**
 * Delay between retries.
 */
message Backoff {
  enum Type {
    FIXED = 0; // Retry with the same delay
    EXPONENTIAL = 1; // Exponential delay increase between retries
  }
  optional double delay = 1; // Time until retry in milliseconds
  optional Type type = 2; // Calculation of the delay
}

// Job-specific read request
message JobReadRequest {
  optional uint32 limit = 1;
  // only possible to sort jobs by creation date
  enum SortOrder {
    UNSORTED = 0;
    ASCENDING = 1;
    DESCENDING = 2;
  }
  optional SortOrder sort = 2;

  // Filter based on fieldName|operation, value|list
  optional JobFilter filter = 4;

  // Fields selector
  repeated io.restorecommerce.resourcebase.FieldFilter fields = 3;
  optional io.restorecommerce.auth.Subject subject = 5;
}

// filter
message JobFilter {
  repeated string job_ids = 1;
  optional string type = 2;
}
