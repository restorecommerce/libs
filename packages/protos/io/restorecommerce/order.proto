syntax = "proto3";

package io.restorecommerce.order;

import "google/protobuf/any.proto";

import "io/restorecommerce/resource_base.proto";
import "io/restorecommerce/meta.proto";
import "io/restorecommerce/auth.proto";
import "io/restorecommerce/status.proto";
import "io/restorecommerce/options.proto";
import "io/restorecommerce/address.proto";
import "io/restorecommerce/amount.proto";
import "io/restorecommerce/country.proto";
import "io/restorecommerce/fulfillment.proto";
import "io/restorecommerce/fulfillment_product.proto";
import "io/restorecommerce/invoice.proto";


service OrderService {
  rpc Read (io.restorecommerce.resourcebase.ReadRequest) returns (OrderListResponse) {
    option (io.restorecommerce.options.is_query) = true;
  };
  rpc Create (OrderList) returns (OrderListResponse);
  rpc Update (OrderList) returns (OrderListResponse);
  rpc Upsert (OrderList) returns (OrderListResponse);
  rpc Evaluate (OrderList) returns (OrderListResponse);
  rpc Submit (OrderList) returns (OrderListResponse);
  rpc Withdraw (OrderIdList) returns (OrderListResponse);
  rpc Cancel (OrderIdList) returns (OrderListResponse);
  rpc Delete (io.restorecommerce.resourcebase.DeleteRequest) returns (io.restorecommerce.resourcebase.DeleteResponse);
  
  // Requires Fulfillment Service
  rpc QueryPackingSolution (FulfillmentRequestList) returns (io.restorecommerce.fulfillment_product.PackingSolutionListResponse);
  // Requires Fulfillment Service
  rpc CreateFulfillment (FulfillmentRequestList) returns (io.restorecommerce.fulfillment.FulfillmentListResponse);
  // Requires Fulfillment Service
  rpc TriggerFulfillment (FulfillmentRequestList) returns (io.restorecommerce.status.StatusListResponse);

  // Requires Invoice Service
  rpc CreateInvoice (InvoiceRequestList) returns (io.restorecommerce.invoice.InvoiceListResponse);
  // Requires Invoice Service
  rpc TriggerInvoice (InvoiceRequestList) returns (io.restorecommerce.status.StatusListResponse);
}

enum State {
  FAILED = 0;
  INVALID = 1;
  CREATED = 2;
  SUBMITTED = 3;
  IN_PROCESS = 4;
  DONE = 5;
  WITHDRAWN = 6;
  CANCELLED = 7;
}

message Item {
  optional string id = 1;
  optional string product_id = 2 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.product.Product",
      target_service: "catalog",
      target_sub_service: "product",
      target_method: "Read",
      field_name: "product",
    }
  ];
  optional string variant_id = 3;
  optional int32 quantity = 4;
  optional double unit_price = 5; //Set by service
  optional io.restorecommerce.amount.Amount amount = 6; //Set by service
}

/**
  Database Entity
*/
message Order {
  option (restorecommerce.options.kafka_subscriber) = {
    plural: "orders"
    topic: "io.restorecommerce.orders.resource"
    created: "orderCreated"
    updated: "orderUpdated"
    deleted: "orderDeleted"
  };

  optional string id = 1;
  optional io.restorecommerce.meta.Meta meta = 2;
  optional string user_id = 3 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.customer.Customer",
      target_service: "resource",
      target_sub_service: "customer",
      target_method: "Read",
      field_name: "customer",
    }
  ];
  optional string customer_id = 4 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.customer.Customer",
      target_service: "resource",
      target_sub_service: "customer",
      target_method: "Read",
      field_name: "customer",
    }
  ];
  optional string shop_id = 5 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.shop.Shop",
      target_service: "resource",
      target_sub_service: "shop",
      target_method: "Read",
      field_name: "shop",
    }
  ];
  repeated Item items = 6;
  optional State order_state = 7;                                         // Set by service
  optional io.restorecommerce.fulfillment.State fulfillment_state = 8;    // Set by kafka
  optional io.restorecommerce.invoice.PaymentState payment_state = 9;            // Set by kafka
  repeated io.restorecommerce.amount.Amount total_amounts = 10;                // Set by service --- repeated in case of variant currency?
  optional io.restorecommerce.address.ShippingAddress shipping_address = 11;
  optional io.restorecommerce.address.BillingAddress billing_address = 12;
  optional string billing_email = 13;
  optional string notification_email = 14;
  optional string customer_order_nr = 15;
  optional string customer_remark = 16;
  optional io.restorecommerce.fulfillment_product.Preferences packaging_preferences = 17;
}

message OrderIdList {
  repeated string ids = 1;
  io.restorecommerce.auth.Subject subject = 2;
}

message OrderList {
  repeated Order items = 1;
  optional uint32 total_count = 2;
  io.restorecommerce.auth.Subject subject = 3;
}

message OrderListResponse {
  repeated OrderResponse items = 1;
  uint32 total_count = 2;
  io.restorecommerce.status.OperationStatus operation_status = 3;
}

message OrderResponse {
  Order payload = 1;
  io.restorecommerce.status.Status status = 2;
}

message Deleted {
  string id = 1;
}

message FulfillmentRequest {
  optional string order_id = 1;
  optional string export_type = 2; // @TODO: not used!
  optional string export_description = 3; // @TODO: not used!
  optional string invoice_number = 4; // @TODO: not used!
  optional io.restorecommerce.address.ShippingAddress sender_address = 5;
  repeated string include_items = 6; // includes all if empty
  google.protobuf.Any data = 7;
}

message FulfillmentRequestList {
  repeated FulfillmentRequest items = 1;
  optional uint32 total_count = 2;
  io.restorecommerce.auth.Subject subject = 3;
}

message InvoiceRequest {
  optional string invoice_number = 1; // if given
  optional string order_id = 2;
  repeated string included_items = 3; // includes all on empty
  optional string included_fulfillments = 4; // includes all on empty
}

message InvoiceRequestList {
  repeated InvoiceRequest items = 1;
  optional uint32 total_count = 2;
  io.restorecommerce.auth.Subject subject = 3;
}