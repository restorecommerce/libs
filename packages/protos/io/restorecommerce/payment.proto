syntax = "proto3";
package io.restorecommerce.payment;
import "io/restorecommerce/auth.proto";
import "io/restorecommerce/status.proto";
import "io/restorecommerce/options.proto";

service PaymentService {
  // Wrapper for setup_authorization in ActiveMerchant
  rpc SetupAuthorization (SetupRequest) returns (SetupResponse);

  // Wrapper for setup_purchase in ActiveMerchant
  rpc SetupPurchase (SetupRequest) returns (SetupResponse);

  // Gets payment details by token or transaction. Only supported by PayPal Express Checkout.
  rpc Authorize (PaymentRequest) returns (PaymentResponse);

  // Gets payment details by token or transaction. Only supported by PayPal Express Checkout.
  rpc Purchase (PaymentRequest) returns (PaymentResponse);

  // Can capture both cardless and standard authorization.
  rpc Capture (CaptureRequest) returns (PaymentResponse);
}

// Request object for setup calls
message SetupRequest {
  optional string ip = 1;
  repeated Item items = 2;
  optional int32 subtotal = 3;
  optional int32 shipping = 4;
  optional int32 handling = 5;
  optional int32 tax = 6;
  optional string currency = 7;
  optional string return_url = 8;
  optional string cancel_return_url = 9;
  optional bool allow_guest_checkout = 10;
  optional Provider provider = 11;
  optional io.restorecommerce.auth.Subject subject = 12;
}

message SetupPayload {
  optional string token = 1;
  optional string confirm_initiation_url = 2;
  optional string initiated_on = 3;
}

message SetupPayloadStatus {
  optional SetupPayload payload = 1;
  optional io.restorecommerce.status.Status status = 2;
}

// Response object for setup calls.
message SetupResponse {
  optional SetupPayloadStatus item = 1;
  optional io.restorecommerce.status.OperationStatus operation_status = 2;
}

// Request object for authorization or purchase call for cardless payment.
message PaymentRequest {
  optional Provider provider = 1;
  optional int32 payment_sum = 2;
  optional string currency = 3;
  optional string payment_id = 4;
  optional string payer_id = 5;
  optional string token = 6;
  optional io.restorecommerce.auth.Subject subject = 7;
}

// Request object for capture call for both standard and cardless payments.
message CaptureRequest {
  optional Provider provider = 1;
  optional int32 payment_sum = 2;
  optional string currency = 3;
  optional string payment_id = 4;
  optional io.restorecommerce.auth.Subject subject = 5;
}

message PaymentPayload {
  optional string payment_id = 1;
  optional string executed_on = 2;
}

message PaymentPayloadStatus {
  optional PaymentPayload payload = 1;
  optional io.restorecommerce.status.Status status = 2;
}

// Unified response object for authorization, purchase and capture calls
// for both standard and cardless payments.
message PaymentResponse {
  optional PaymentPayloadStatus item = 1;
  optional io.restorecommerce.status.OperationStatus operation_status = 2;
}

// Used for building ActiveMerchant::Billing::CreditCard instance.
message PaymentCard {
  optional string primary_number = 1;
  optional string first_name = 2;
  optional string last_name = 3;
  optional string month = 4;
  optional int32 year = 5;
  optional string verification_value = 6;
}

// Represents purchased item. Not all providers support this.
message Item {
  optional string name = 1;
  optional string description = 2;
  optional int32 quantity = 3;
  optional int32 amount = 4;
}

// Possible service providers. Provider names must be exactly as in config.yml.
enum Provider {
  NO_PROVIDER = 0;
  Adyen = 1;
  AuthorizeNetCIM = 2;
  AuthorizeNet = 3;
  AxcessMS = 4;
  Balanced = 5;
  BamboraAsiaPacific = 6;
  BankFrick = 7;
  Banwire = 8;
  BarclaysePDQExtraPlus = 9;
  Be2Bill = 10;
  Beanstreamcom = 11;
  BluePay = 12;
  Borgun = 13;
  Braintree = 14;
  BridgePay = 15;
  Cardknox = 16;
  CardSave = 17;
  CardStream = 18;
  Cashnet = 19;
  Cecabank = 20;
  Cenpos = 21;
  CAMSCentralAccountManagementSystem = 22;
  Checkoutcom = 23;
  Clearhaus = 24;
  Commercegate = 25;
  Conekta = 26;
  CyberSource = 27;
  DIBS = 28;
  DataCash = 29;
  Efsnet = 30;
  ElavonMyVirtualMerchant = 31;
  ePay = 32;
  EVOCanada = 33;
  eWAY = 34;
  eWAYRapid = 35;
  Exact = 36;
  Ezic = 37;
  FatZebra = 38;
  FederatedCanada = 39;
  FinansbankWebPOS = 40;
  Flo2Cash = 41;
  stPayGatewayNet = 42;
  FirstDataGlobalGatewaye4 = 43;
  FirstGiving = 44;
  GarantiSanalPOS = 45;
  GlobalTransport = 46;
  HDFC = 47;
  HeartlandPaymentSystems = 48;
  iATSPayments = 49;
  InspireCommerce = 50;
  InstaPay = 51;
  IPP = 52;
  Iridium = 53;
  iTransact = 54;
  JetPay = 55;
  Komoju = 56;
  LinkPoint = 57;
  LitleCo = 58;
  maxiPago = 59;
  MerchanteSolutions = 60;
  MerchantOneGateway = 61;
  MerchantWARE = 62;
  MerchantWarrior = 63;
  Mercury = 64;
  MetricsGlobal = 65;
  MasterCardInternetGatewayServiceMiGS = 66;
  ModernPayments = 67;
  MONEI = 68;
  Moneris = 69;
  MoneyMovers = 70;
  NABTransact = 71;
  NELiXTransaX = 72;
  NetRegistry = 73;
  BBSNetaxept = 74;
  NETbilling = 75;
  NETPAYGateway = 76;
  NMI = 77;
  Ogone = 78;
  Omise = 79;
  Openpay = 80;
  OptimalPayments = 81;
  OrbitalPaymentech = 82;
  Pagarme = 83;
  PagoFacil = 84;
  PayConex = 85;
  PayGatePayXML = 86;
  PayHub = 87;
  PayJunction = 89;
  PaySecure = 90;
  PayboxDirect = 91;
  Payeezy = 92;
  Payex = 93;
  PaymentExpress = 94;
  PAYMILL = 95;
  PayPalExpressCheckout = 96;
  PayPalExpressCheckoutUK = 97;
  PayPalPayflowPro = 98;
  PayPalPaymentsProUS = 99;
  PayPalPaymentsProUK = 100;
  PayPalWebsitePaymentsProCA = 101;
  PayPalExpressCheckoutforDigitalGoods = 102;
  Payscout = 103;
  Paystation = 104;
  PayWay = 105;
  PayUIndia = 106;
  PinPayments = 107;
  PlugnPay = 108;
  Psigate = 109;
  PSLPaymentSolutions = 110;
  QuickBooksMerchantServices = 111;
  QuickBooksPayments = 112;
  QuantumGateway = 113;
  QuickPay = 114;
  Qvalent = 115;
  Raven = 116;
  Realex = 117;
  Redsys = 118;
  S5 = 119;
  SagePay = 120;
  SagePaymentSolutions = 121;
  SallieMae = 122;
  SecureNet = 123;
  SecurePay = 124;
  SecurePayTech = 125;
  SecurionPay = 126;
  SkipJack = 127;
  SoEasyPay = 128;
  Spreedly = 129;
  Stripe = 130;
  Swipe = 131;
  TNS = 132;
  TransactPro = 133;
  TransFirst = 134;
  Transnational = 135;
  Trexle = 136;
  TrustCommerce = 137;
  USAePay = 138;
  VancoPaymentSolutions = 139;
  Verifi = 140;
  ViaKLIX = 141;
  WebPay = 142;
  WePay = 143;
  Wirecard = 144;
  WorldpayGlobal = 145;
  WorldpayOnline = 146;
  WorldpayUS = 147;
}

// Possible payment identifiers.
enum PaymentIdType {
  NO_IDENTIFIER_TYPE = 0;
  TOKEN = 1;
  TRANSACTION_ID = 2;
}
