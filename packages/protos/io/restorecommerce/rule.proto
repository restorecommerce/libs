syntax = "proto3";

package io.restorecommerce.rule;

import "io/restorecommerce/resource_base.proto";
import "io/restorecommerce/meta.proto";
import "io/restorecommerce/auth.proto";
import "io/restorecommerce/attribute.proto";
import "io/restorecommerce/status.proto";
import "io/restorecommerce/filter.proto";
import "io/restorecommerce/options.proto";

/**
* Target specified by a Rule or a Request.
*/
message Target {
  repeated io.restorecommerce.attribute.Attribute subjects = 1;
  repeated io.restorecommerce.attribute.Attribute resources = 2;
  repeated io.restorecommerce.attribute.Attribute actions = 3;
}

/**
* Resulting effect from a Policy or Rule.
*/
enum Effect {
  PERMIT = 0;
  DENY = 1;
}

message Rule {
  optional string id = 1;
  optional io.restorecommerce.meta.Meta meta = 2;
  optional string name = 3;
  optional string description = 4;
  optional Target target = 5;
  optional ContextQuery context_query = 6;
  optional string condition = 7; // JS code
  optional Effect effect = 8;
  optional bool evaluation_cacheable = 9;
}

message RuleRQ { // used for `whatIsAllowed` / reverse queries
  optional string id = 1;
  optional Target target = 2;
  optional Effect effect = 3;
  optional string condition = 4;
  optional ContextQuery context_query = 5;
  optional bool evaluation_cacheable = 6;
}

message RuleList {
  repeated Rule items = 1;
  optional uint32 total_count = 2;
  optional io.restorecommerce.auth.Subject subject = 3;
}

message RuleListResponse {
  repeated RuleResponse items = 1;
  optional uint32 total_count = 2;
  optional io.restorecommerce.status.OperationStatus operation_status = 3;
}

message RuleResponse {
  optional Rule payload = 1;
  optional io.restorecommerce.status.Status status = 2;
}

// Query to pull resources from an external service
//  and append them to the request's context.
// The retrieved data can then be passed onto the request's context
message ContextQuery {
  repeated io.restorecommerce.filter.FilterOp filters = 1;
  optional string query = 2;
}

service RuleService {
  rpc Read (io.restorecommerce.resourcebase.ReadRequest) returns (RuleListResponse) {
    option (io.restorecommerce.options.is_query) = true;
  };
  rpc Create (RuleList) returns (RuleListResponse);
  rpc Delete (io.restorecommerce.resourcebase.DeleteRequest) returns (io.restorecommerce.resourcebase.DeleteResponse);
  rpc Update (RuleList) returns (RuleListResponse);
  rpc Upsert (RuleList) returns (RuleListResponse);
}
