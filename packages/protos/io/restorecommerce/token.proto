syntax = "proto3";

package io.restorecommerce.token;

import "io/restorecommerce/auth.proto";
import "google/protobuf/any.proto";
import "io/restorecommerce/options.proto";
import "google/protobuf/timestamp.proto";

/*
* Microservice definition.
*/
service TokenService {
  rpc upsert (TokenData) returns (google.protobuf.Any); // creates or upserts ID_token to `Redis` and returns sucess or failure message
  rpc find (Identifier) returns (google.protobuf.Any) {
    option (io.restorecommerce.options.is_query) = true;
  }; // find id_token using access_token identifier (Return previously stored instance of an oidc-provider model)
  rpc destroy (Identifier) returns (google.protobuf.Any); // removes the id_token from redis
  rpc revokeByGrantId (GrantId) returns (google.protobuf.Any); // Destroy/Drop/Remove a stored id_token by its grantId property reference.
  rpc consume (Identifier) returns (google.protobuf.Any);  // Mark a stored id_token as consumed (not yet expired though!). Future finds for this id should be fulfilled with an object containing additional property named "consumed" with a truthy value (timestamp, date, boolean, etc).
}

message TokenData {
  optional string id = 1;
  optional google.protobuf.Any payload = 2;
  optional google.protobuf.Timestamp expires_in = 3;
  optional string type = 4;
  optional io.restorecommerce.auth.Subject subject = 5;
}

message Identifier {
  optional string id = 1;
  optional string type = 2;
  optional io.restorecommerce.auth.Subject subject = 3;
}

message GrantId {
  optional string grant_id = 1;
  optional io.restorecommerce.auth.Subject subject = 2;
}
