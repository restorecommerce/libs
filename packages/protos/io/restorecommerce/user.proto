syntax = "proto3";

package io.restorecommerce.user;

import "io/restorecommerce/resource_base.proto";
import "io/restorecommerce/meta.proto";
import "io/restorecommerce/auth.proto";
import "io/restorecommerce/attribute.proto";
import "io/restorecommerce/image.proto";
import "io/restorecommerce/status.proto";
import "google/protobuf/any.proto";
import "io/restorecommerce/role.proto";
import "io/restorecommerce/options.proto";
import "google/protobuf/timestamp.proto";

// Used by resolvers
import "io/restorecommerce/timezone.proto";
import "io/restorecommerce/locale.proto";

/**
 * The microservice for the user resource.
 */
service UserService {
  rpc Read (io.restorecommerce.resourcebase.ReadRequest) returns (UserListWithRoleResponse) {
    option (io.restorecommerce.options.is_query) = true;
  };
  rpc Create (UserList) returns (UserListResponse);
  rpc Delete (io.restorecommerce.resourcebase.DeleteRequest) returns (io.restorecommerce.resourcebase.DeleteResponse);
  rpc Update (UserList) returns (UserListResponse);
  rpc Upsert (UserList) returns (UserListResponse);

  rpc Find (FindRequest) returns (UserListResponse) {
    option (io.restorecommerce.options.is_query) = true;
  };
  rpc Register (RegisterRequest) returns (UserResponse);
  rpc Activate (ActivateRequest) returns (io.restorecommerce.status.OperationStatusObj);
  rpc ChangePassword (ChangePasswordRequest) returns (io.restorecommerce.status.OperationStatusObj);
  rpc RequestPasswordChange (RequestPasswordChangeRequest) returns (io.restorecommerce.status.OperationStatusObj);
  rpc RequestEmailChange (ChangeEmailRequest) returns (io.restorecommerce.status.OperationStatusObj);
  rpc ConfirmPasswordChange (ConfirmPasswordChangeRequest) returns (io.restorecommerce.status.OperationStatusObj);
  rpc ConfirmEmailChange (ConfirmEmailChangeRequest) returns (io.restorecommerce.status.OperationStatusObj);
  rpc Unregister (UnregisterRequest) returns (io.restorecommerce.status.OperationStatusObj);
  rpc Login (LoginRequest) returns (LoginResponse);
  rpc FindByRole (FindByRoleRequest) returns (UserListResponse) {
    option (io.restorecommerce.options.is_query) = true;
  };
  rpc DeleteUsersByOrg (OrgIDRequest) returns (DeleteUsersByOrgResponse);
  rpc ConfirmUserInvitation (ConfirmUserInvitationRequest) returns (io.restorecommerce.status.OperationStatusObj);
  rpc SendInvitationEmail (SendInvitationEmailRequest) returns (io.restorecommerce.status.OperationStatusObj);
  rpc FindByToken (FindByTokenRequest) returns (UserResponse) {
    option (io.restorecommerce.options.is_query) = true;
  };
  rpc SendActivationEmail (SendActivationEmailRequest) returns (io.restorecommerce.status.OperationStatusObj);
  rpc SetupTOTP (SetupTOTPRequest) returns (SetupTOTPResponse);
  rpc CompleteTOTPSetup (CompleteTOTPSetupRequest) returns (io.restorecommerce.status.OperationStatusObj);
  rpc ExchangeTOTP (ExchangeTOTPRequest) returns (UserResponse);
  rpc GetUnauthenticatedSubjectTokenForTenant(TenantRequest) returns (TenantResponse);
}

/**
* Request to verify password and retrieve the user's info.
* Either name or email can be provided.
*/
message LoginRequest {
  optional string identifier = 1; // User name or email
  optional string password = 2; // Raw password
  optional string token = 3;
}

message LoginResponse {
  optional User payload = 1;
  optional io.restorecommerce.status.Status status = 2;
  optional string totp_session_token = 3;
}

message SetupTOTPRequest {
  optional string identifier = 1;
  optional io.restorecommerce.auth.Subject subject = 2;
}

message SetupTOTPResponse {
  optional string totp_secret = 1;
  optional io.restorecommerce.status.OperationStatus operation_status = 2;
}

message CompleteTOTPSetupRequest {
  optional string code = 1;
  optional io.restorecommerce.auth.Subject subject = 2;
}

message ExchangeTOTPRequest {
  optional string code = 1;
  optional io.restorecommerce.auth.Subject subject = 2;
  optional string totp_session_token = 3;
}

message TenantRequest {
  optional string domain = 1;
}

message TenantResponse {
  optional string token = 1;
}

message OrgIDRequest {
  repeated string org_ids = 1;
  optional io.restorecommerce.auth.Subject subject = 2;
}

message DeleteUsersByOrgResponse {
  repeated string user_ids = 1;
  optional io.restorecommerce.status.OperationStatus operation_status = 2;
}

message FindRequest {
  optional string id = 1; // User ID
  optional string name = 2;
  optional string email = 3;
  io.restorecommerce.auth.Subject subject = 4;
}

message FindByTokenRequest {
  optional string token = 1;
}

enum UserType {
  ORG_USER = 0;
  INDIVIDUAL_USER = 1;
  GUEST = 2;
  TECHNICAL_USER = 3;
}

message RegisterRequest {
  optional string id = 1;
  optional bool guest = 2;
  optional io.restorecommerce.meta.Meta meta = 3;
  optional string name = 4;
  optional string first_name = 5;
  optional string last_name = 6;
  optional string email = 7;
  optional string password = 8;
  optional string timezone_id = 9;
  optional string locale_id = 10;

  optional string default_scope = 11; // default hierarchical scope
  optional UserType user_type = 12;
  optional string captcha_code = 13;
  optional google.protobuf.Any data = 14; // data
}

message ActivateRequest {
  optional string identifier = 1; // user name or email
  optional string activation_code = 2;
  optional io.restorecommerce.auth.Subject subject = 3;
}

message ConfirmUserInvitationRequest {
  optional string identifier = 1; // user name or email
  optional string password = 2;
  optional string activation_code = 3;
  optional io.restorecommerce.auth.Subject subject = 4;
}

message SendInvitationEmailRequest {
  optional string identifier = 1; // user name or email
  optional string invited_by_user_identifier = 2;
  optional io.restorecommerce.auth.Subject subject = 3;
}

message ChangePasswordRequest {
  optional string password = 2;
  optional string new_password = 3;
  optional io.restorecommerce.auth.Subject subject = 4;
}

message RequestPasswordChangeRequest {
  optional string identifier = 1; // user name or email
  optional io.restorecommerce.auth.Subject subject = 2;
}

message ConfirmPasswordChangeRequest {
  optional string identifier = 1; // user name or email
  optional string activation_code = 2;
  optional string password = 3;
  optional io.restorecommerce.auth.Subject subject = 4;
}

message ChangeEmailRequest {
  optional string identifier = 1; // user name or email
  optional string new_email = 2;
  optional io.restorecommerce.auth.Subject subject = 3;
}

message ConfirmEmailChangeRequest {
  optional string identifier = 1; // user name or email
  optional string activation_code = 2;
  optional io.restorecommerce.auth.Subject subject = 3;
}

message UnregisterRequest {
  optional string identifier = 1; // User ID
  optional io.restorecommerce.auth.Subject subject = 2;
}

message SendActivationEmailRequest {
  optional string identifier = 1; // User name or email
  optional io.restorecommerce.auth.Subject subject = 2;
}

/**
 * User deletion event.
 * Send when a user was deleted or unregistered.
 *
 * Events:
 * usersDeleted,
 * unregistered,
 */
message Deleted {
  optional string id = 1;
}

/**
 * User password changed event.
 *
 * Events:
 * passwordChanged,
 */
message PasswordChanged {
  optional string id = 1; // User ID
  optional string password_hash = 2;
}

message PasswordChangeRequested {
  optional string id = 1; // User ID
}

/**
 * User email id changed event.
 */
message EmailChangeRequested {
  optional string id = 1;
  optional string activation_code = 2;
  optional string new_email = 3;
}

message EmailChangeConfirmed {
  optional string id = 1; // User ID
  optional string email = 2;
}

/**
 * A list of User.
 */
message UserList {
  repeated User items = 1;
  optional uint32 total_count = 2;
  optional io.restorecommerce.auth.Subject subject = 3;
}

message UserListWithRoleResponse {
  repeated UserRoleResponse items = 1;
  optional uint32 total_count = 2;
  optional io.restorecommerce.status.OperationStatus operation_status = 3;
}

message UserRoleResponse {
  optional UserRole payload = 1;
  optional io.restorecommerce.status.Status status = 2;
}

message UserListResponse {
  repeated UserResponse items = 1;
  optional uint32 total_count = 2;
  optional io.restorecommerce.status.OperationStatus operation_status = 3;
}

message UserResponse {
  optional User payload = 1;
  optional io.restorecommerce.status.Status status = 2;
}

/**
 * User activation request.
 */
message Activate {
  optional string id = 1; // User ID
}

message FindByRoleRequest {
  optional string role = 1;
  repeated io.restorecommerce.attribute.Attribute attributes = 2;
  optional io.restorecommerce.auth.Subject subject = 3;
}

/**
 * A User resource.
 */
message User {
  option (restorecommerce.options.kafka_subscriber) = {
    plural: "users"
    topic: "io.restorecommerce.users.resource"
    created: "userCreated"
    updated: "userUpdated"
    deleted: "userDeleted"
  };

  optional string id = 1; // User ID, unique, key
  optional io.restorecommerce.meta.Meta meta = 2;
  optional string name = 3; // The name of the user, can be used for login
  optional string first_name = 4;
  optional string last_name = 5;
  optional string email = 6; // Email address, can be used for login
  optional string new_email = 7; // New email address; set by `requestEmailChange` and overrides actual email upon `confirmEmailChange`
  optional bool active = 8; // If the user was activated via the activation process
  optional string activation_code = 9; // Activation code used in the activation process
  optional string password = 10; // Raw password, not stored
  optional string password_hash = 11; // Encrypted password, stored
  repeated io.restorecommerce.auth.RoleAssociation role_associations = 12; // A user can have multiple roles and different attributes coupled with each role
  optional string timezone_id = 13 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.timezone.Timezone",
      target_service: "master_data",
      target_sub_service: "timezone",
      target_method: "Read",
      field_name: "timezone",
    }
  ];  // timezone_id specifications
  optional string locale_id = 14 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.locale.Locale",
      target_service: "master_data",
      target_sub_service: "locale",
      target_method: "Read",
      field_name: "locale",
    }
  ];  // locale specifications
  optional string default_scope = 15; // default hierarchical scope
  optional bool guest = 16; // Is the user a guest. A guest is a automatically generated user which can later be turned in a non-guest user.
  optional io.restorecommerce.image.Image image = 17;
  optional UserType user_type = 18;
  optional bool invite = 19; // true if user has been invited by another user
  optional string invited_by_user_name = 20; // User who is inviting
  optional string invited_by_user_first_name = 21; // First name of user inviting
  optional string invited_by_user_last_name = 22; // Last name of user inviting
  repeated io.restorecommerce.auth.Tokens tokens = 23;
  optional google.protobuf.Timestamp last_access = 24; // When the user has last been used
  repeated io.restorecommerce.attribute.Attribute properties = 25; // additional properties
  optional google.protobuf.Any data = 26; // additional data
  optional string totp_secret = 27; /// TOTP Secret
  optional string totp_secret_processing = 28; /// TOTP Secret before being confirmed
  repeated string totp_session_tokens = 29; /// TOTP Login session tokens
}

/**
 * A User resource with role
 */
message UserRole {
  optional string id = 1; // User ID, unique, key
  optional io.restorecommerce.meta.Meta meta = 2;
  optional string name = 3; // The name of the user, can be used for login
  optional string first_name = 4;
  optional string last_name = 5;
  optional string email = 6; // Email address, can be used for login
  optional string new_email = 7; // New email address; set by `requestEmailChange` and overrides actual email upon `confirmEmailChange`
  optional bool active = 8; // If the user was activated via the activation process
  optional string activation_code = 9; // Activation code used in the activation process
  optional string password = 10; // Raw password, not stored
  optional string password_hash = 11; // Encrypted password, stored
  repeated io.restorecommerce.auth.RoleAssociation role_associations = 12; // A user can have multiple roles and different attributes coupled with each role
  optional string timezone_id = 13 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.timezone.Timezone",
      target_service: "master_data",
      target_sub_service: "timezone",
      target_method: "Read",
      field_name: "timezone",
    }
  ];	// timezone_id specifications
  optional string locale_id = 14 [
    (io.restorecommerce.options.resolver) = {
      target_type: ".io.restorecommerce.locale.Locale",
      target_service: "master_data",
      target_sub_service: "locale",
      target_method: "Read",
      field_name: "locale",
    }
  ];	// locale specifications
  optional string default_scope = 15; // default hierarchical scope
  optional bool guest = 16; // Is the user a guest. A guest is a automatically generated user which can later be turned in a non-guest user.
  optional io.restorecommerce.image.Image image = 17;
  optional UserType user_type = 18;
  optional bool invite = 19; // true if user has been invited by another user
  optional string invited_by_user_name = 20; // User who is inviting
  optional string invited_by_user_first_name = 21; // First name of user inviting
  optional string invited_by_user_last_name = 22; // Last name of user inviting
  repeated io.restorecommerce.auth.Tokens tokens = 23;
  optional google.protobuf.Timestamp last_access = 24; // When the user has last been used
  repeated io.restorecommerce.attribute.Attribute properties = 25; // additional properties
  optional google.protobuf.Any data = 26; // additional data
  repeated io.restorecommerce.role.Role roles = 27;
}
