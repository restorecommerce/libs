/* eslint-disable */
import type { CallContext, CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";
import { FileDescriptorProto as FileDescriptorProto1 } from "ts-proto-descriptors";
import { Any, protoMetadata as protoMetadata2 } from "../../google/protobuf/any";
import { protoMetadata as protoMetadata4, Subject } from "./auth";
import { Meta, protoMetadata as protoMetadata3 } from "./meta";
import { protoMetadata as protoMetadata6 } from "./options";
import { DeleteRequest, DeleteResponse, FieldFilter, protoMetadata as protoMetadata1 } from "./resource_base";
import { OperationStatus, protoMetadata as protoMetadata5, Status } from "./status";

export const protobufPackage = "io.restorecommerce.job";

/**
 * A Kafka event.
 * Send when a job resource got deleted.
 */
export interface Deleted {
  id: string;
}

/** A list of jobs. */
export interface JobList {
  items: Job[];
  totalCount: number;
  subject?: Subject;
}

export interface JobListResponse {
  items: JobResponse[];
  totalCount: number;
  operationStatus?: OperationStatus;
}

export interface JobResponse {
  payload?: Job;
  status?: Status;
}

/** A Job resource */
export interface Job {
  /** Job ID */
  id: string;
  /** Job type */
  type: string;
  /** Job-specific data with variable payload */
  data?: Data;
  /** Used to specify the time at which the job is run */
  when: string;
  /** The job options */
  options?: JobOptions;
}

/** Job Options */
export interface JobOptions {
  /** Job priority */
  priority: JobOptions_Priority;
  /** Amount of possible failing runs until job fails */
  attempts: number;
  /** Delay settings between failed job runs */
  backoff?: Backoff;
  /** The number of milliseconds after which the job should be fail with a timeout error */
  timeout: number;
  /** Used for periodic jobs */
  repeat?: Repeat;
  /** To override the job ID - by default, the job ID is a unique generated by bull */
  jobId: string;
  /** If true, removes the job when it successfully completes */
  removeOnComplete: boolean;
}

export enum JobOptions_Priority {
  NORMAL = "NORMAL",
  LOW = "LOW",
  MEDIUM = "MEDIUM",
  HIGH = "HIGH",
  CRITICAL = "CRITICAL",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function jobOptions_PriorityFromJSON(object: any): JobOptions_Priority {
  switch (object) {
    case 0:
    case "NORMAL":
      return JobOptions_Priority.NORMAL;
    case 10:
    case "LOW":
      return JobOptions_Priority.LOW;
    case -5:
    case "MEDIUM":
      return JobOptions_Priority.MEDIUM;
    case -10:
    case "HIGH":
      return JobOptions_Priority.HIGH;
    case -15:
    case "CRITICAL":
      return JobOptions_Priority.CRITICAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JobOptions_Priority.UNRECOGNIZED;
  }
}

export function jobOptions_PriorityToJSON(object: JobOptions_Priority): string {
  switch (object) {
    case JobOptions_Priority.NORMAL:
      return "NORMAL";
    case JobOptions_Priority.LOW:
      return "LOW";
    case JobOptions_Priority.MEDIUM:
      return "MEDIUM";
    case JobOptions_Priority.HIGH:
      return "HIGH";
    case JobOptions_Priority.CRITICAL:
      return "CRITICAL";
    case JobOptions_Priority.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function jobOptions_PriorityToNumber(object: JobOptions_Priority): number {
  switch (object) {
    case JobOptions_Priority.NORMAL:
      return 0;
    case JobOptions_Priority.LOW:
      return 10;
    case JobOptions_Priority.MEDIUM:
      return -5;
    case JobOptions_Priority.HIGH:
      return -10;
    case JobOptions_Priority.CRITICAL:
      return -15;
    case JobOptions_Priority.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface Repeat {
  every: number;
  cron: string;
  startDate: string;
  endDate: string;
  count: number;
  /** To override the job ID - by default, the job ID is a unique generated by bull */
  jobId: string;
  /** time zone */
  tz: string;
}

/** Data which is stored within a job instance */
export interface Data {
  /** optional variable payload */
  payload?: Any;
  meta?: Meta;
  /** id of job creator */
  subjectId: string;
}

/**
 * A scheduled Job.
 * Emitted to Kafka by the scheduling service with event name 'queuedJob' and retreived by a service which processes this job.
 */
export interface ScheduledJob {
  /** Job instance ID */
  id: string;
  type: string;
  /** Job-specific data with variable payload */
  data?: Data;
  /** Type of schedule (ONCE, RECURR, etc) */
  scheduleType: string;
}

/**
 * A finished scheduled Job.
 * Emitted to Kafka by the service which processed the job with event name 'done' and retrieved by the scheduling service.
 */
export interface JobDone {
  /** Job instance ID */
  id: string;
  /** Type of schedule (ONCE, RECURR, etc) */
  scheduleType: string;
  /** Whether to delete scheduled job */
  deleteScheduled: boolean;
  /** Job type */
  type: string;
  result?: Any;
}

/**
 * A failed scheduled Job event from the Job Service.
 * Emitted to Kafka by the service which processed the Job and retrieved by the scheduling service.
 */
export interface JobFailed {
  /** Job instance ID */
  id: string;
  /** Error message */
  error: string;
  /** Type of job ex: ONCE, RECURR etc. */
  scheduleType: string;
  /** Job type */
  type: string;
}

/** Delay between retries. */
export interface Backoff {
  /** Time until retry in milliseconds */
  delay: number;
  /** Calculation of the delay */
  type: Backoff_Type;
}

export enum Backoff_Type {
  /** FIXED - Retry with the same delay */
  FIXED = "FIXED",
  /** EXPONENTIAL - Exponential delay increase between retries */
  EXPONENTIAL = "EXPONENTIAL",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function backoff_TypeFromJSON(object: any): Backoff_Type {
  switch (object) {
    case 0:
    case "FIXED":
      return Backoff_Type.FIXED;
    case 1:
    case "EXPONENTIAL":
      return Backoff_Type.EXPONENTIAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Backoff_Type.UNRECOGNIZED;
  }
}

export function backoff_TypeToJSON(object: Backoff_Type): string {
  switch (object) {
    case Backoff_Type.FIXED:
      return "FIXED";
    case Backoff_Type.EXPONENTIAL:
      return "EXPONENTIAL";
    case Backoff_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function backoff_TypeToNumber(object: Backoff_Type): number {
  switch (object) {
    case Backoff_Type.FIXED:
      return 0;
    case Backoff_Type.EXPONENTIAL:
      return 1;
    case Backoff_Type.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** Job-specific read request */
export interface JobReadRequest {
  limit: number;
  sort: JobReadRequest_SortOrder;
  /** Filter based on fieldName|operation, value|list */
  filter?: JobFilter;
  /** Fields selector */
  field: FieldFilter[];
  subject?: Subject;
}

/** only possible to sort jobs by creation date */
export enum JobReadRequest_SortOrder {
  UNSORTED = "UNSORTED",
  ASCENDING = "ASCENDING",
  DESCENDING = "DESCENDING",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function jobReadRequest_SortOrderFromJSON(object: any): JobReadRequest_SortOrder {
  switch (object) {
    case 0:
    case "UNSORTED":
      return JobReadRequest_SortOrder.UNSORTED;
    case 1:
    case "ASCENDING":
      return JobReadRequest_SortOrder.ASCENDING;
    case 2:
    case "DESCENDING":
      return JobReadRequest_SortOrder.DESCENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JobReadRequest_SortOrder.UNRECOGNIZED;
  }
}

export function jobReadRequest_SortOrderToJSON(object: JobReadRequest_SortOrder): string {
  switch (object) {
    case JobReadRequest_SortOrder.UNSORTED:
      return "UNSORTED";
    case JobReadRequest_SortOrder.ASCENDING:
      return "ASCENDING";
    case JobReadRequest_SortOrder.DESCENDING:
      return "DESCENDING";
    case JobReadRequest_SortOrder.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function jobReadRequest_SortOrderToNumber(object: JobReadRequest_SortOrder): number {
  switch (object) {
    case JobReadRequest_SortOrder.UNSORTED:
      return 0;
    case JobReadRequest_SortOrder.ASCENDING:
      return 1;
    case JobReadRequest_SortOrder.DESCENDING:
      return 2;
    case JobReadRequest_SortOrder.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** filter */
export interface JobFilter {
  jobIds: string[];
  type: string;
}

function createBaseDeleted(): Deleted {
  return { id: "" };
}

export const Deleted = {
  encode(message: Deleted, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Deleted {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Deleted {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: Deleted): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create(base?: DeepPartial<Deleted>): Deleted {
    return Deleted.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Deleted>): Deleted {
    const message = createBaseDeleted();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseJobList(): JobList {
  return { items: [], totalCount: 0, subject: undefined };
}

export const JobList = {
  encode(message: JobList, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.items) {
      Job.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).uint32(message.totalCount);
    }
    if (message.subject !== undefined) {
      Subject.encode(message.subject, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JobList {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.items.push(Job.decode(reader, reader.uint32()));
          break;
        case 2:
          message.totalCount = reader.uint32();
          break;
        case 3:
          message.subject = Subject.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): JobList {
    return {
      items: Array.isArray(object?.items) ? object.items.map((e: any) => Job.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? Number(object.totalCount) : 0,
      subject: isSet(object.subject) ? Subject.fromJSON(object.subject) : undefined,
    };
  },

  toJSON(message: JobList): unknown {
    const obj: any = {};
    if (message.items) {
      obj.items = message.items.map((e) => e ? Job.toJSON(e) : undefined);
    } else {
      obj.items = [];
    }
    message.totalCount !== undefined && (obj.totalCount = Math.round(message.totalCount));
    message.subject !== undefined && (obj.subject = message.subject ? Subject.toJSON(message.subject) : undefined);
    return obj;
  },

  create(base?: DeepPartial<JobList>): JobList {
    return JobList.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<JobList>): JobList {
    const message = createBaseJobList();
    message.items = object.items?.map((e) => Job.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.subject = (object.subject !== undefined && object.subject !== null)
      ? Subject.fromPartial(object.subject)
      : undefined;
    return message;
  },
};

function createBaseJobListResponse(): JobListResponse {
  return { items: [], totalCount: 0, operationStatus: undefined };
}

export const JobListResponse = {
  encode(message: JobListResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.items) {
      JobResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).uint32(message.totalCount);
    }
    if (message.operationStatus !== undefined) {
      OperationStatus.encode(message.operationStatus, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JobListResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.items.push(JobResponse.decode(reader, reader.uint32()));
          break;
        case 2:
          message.totalCount = reader.uint32();
          break;
        case 3:
          message.operationStatus = OperationStatus.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): JobListResponse {
    return {
      items: Array.isArray(object?.items) ? object.items.map((e: any) => JobResponse.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? Number(object.totalCount) : 0,
      operationStatus: isSet(object.operationStatus) ? OperationStatus.fromJSON(object.operationStatus) : undefined,
    };
  },

  toJSON(message: JobListResponse): unknown {
    const obj: any = {};
    if (message.items) {
      obj.items = message.items.map((e) => e ? JobResponse.toJSON(e) : undefined);
    } else {
      obj.items = [];
    }
    message.totalCount !== undefined && (obj.totalCount = Math.round(message.totalCount));
    message.operationStatus !== undefined &&
      (obj.operationStatus = message.operationStatus ? OperationStatus.toJSON(message.operationStatus) : undefined);
    return obj;
  },

  create(base?: DeepPartial<JobListResponse>): JobListResponse {
    return JobListResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<JobListResponse>): JobListResponse {
    const message = createBaseJobListResponse();
    message.items = object.items?.map((e) => JobResponse.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.operationStatus = (object.operationStatus !== undefined && object.operationStatus !== null)
      ? OperationStatus.fromPartial(object.operationStatus)
      : undefined;
    return message;
  },
};

function createBaseJobResponse(): JobResponse {
  return { payload: undefined, status: undefined };
}

export const JobResponse = {
  encode(message: JobResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.payload !== undefined) {
      Job.encode(message.payload, writer.uint32(10).fork()).ldelim();
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JobResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.payload = Job.decode(reader, reader.uint32());
          break;
        case 2:
          message.status = Status.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): JobResponse {
    return {
      payload: isSet(object.payload) ? Job.fromJSON(object.payload) : undefined,
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
    };
  },

  toJSON(message: JobResponse): unknown {
    const obj: any = {};
    message.payload !== undefined && (obj.payload = message.payload ? Job.toJSON(message.payload) : undefined);
    message.status !== undefined && (obj.status = message.status ? Status.toJSON(message.status) : undefined);
    return obj;
  },

  create(base?: DeepPartial<JobResponse>): JobResponse {
    return JobResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<JobResponse>): JobResponse {
    const message = createBaseJobResponse();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Job.fromPartial(object.payload)
      : undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseJob(): Job {
  return { id: "", type: "", data: undefined, when: "", options: undefined };
}

export const Job = {
  encode(message: Job, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== "") {
      writer.uint32(90).string(message.type);
    }
    if (message.data !== undefined) {
      Data.encode(message.data, writer.uint32(98).fork()).ldelim();
    }
    if (message.when !== "") {
      writer.uint32(170).string(message.when);
    }
    if (message.options !== undefined) {
      JobOptions.encode(message.options, writer.uint32(242).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Job {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;
        case 11:
          message.type = reader.string();
          break;
        case 12:
          message.data = Data.decode(reader, reader.uint32());
          break;
        case 21:
          message.when = reader.string();
          break;
        case 30:
          message.options = JobOptions.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Job {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      type: isSet(object.type) ? String(object.type) : "",
      data: isSet(object.data) ? Data.fromJSON(object.data) : undefined,
      when: isSet(object.when) ? String(object.when) : "",
      options: isSet(object.options) ? JobOptions.fromJSON(object.options) : undefined,
    };
  },

  toJSON(message: Job): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.type !== undefined && (obj.type = message.type);
    message.data !== undefined && (obj.data = message.data ? Data.toJSON(message.data) : undefined);
    message.when !== undefined && (obj.when = message.when);
    message.options !== undefined && (obj.options = message.options ? JobOptions.toJSON(message.options) : undefined);
    return obj;
  },

  create(base?: DeepPartial<Job>): Job {
    return Job.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Job>): Job {
    const message = createBaseJob();
    message.id = object.id ?? "";
    message.type = object.type ?? "";
    message.data = (object.data !== undefined && object.data !== null) ? Data.fromPartial(object.data) : undefined;
    message.when = object.when ?? "";
    message.options = (object.options !== undefined && object.options !== null)
      ? JobOptions.fromPartial(object.options)
      : undefined;
    return message;
  },
};

function createBaseJobOptions(): JobOptions {
  return {
    priority: JobOptions_Priority.NORMAL,
    attempts: 0,
    backoff: undefined,
    timeout: 0,
    repeat: undefined,
    jobId: "",
    removeOnComplete: false,
  };
}

export const JobOptions = {
  encode(message: JobOptions, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.priority !== JobOptions_Priority.NORMAL) {
      writer.uint32(104).int32(jobOptions_PriorityToNumber(message.priority));
    }
    if (message.attempts !== 0) {
      writer.uint32(112).uint32(message.attempts);
    }
    if (message.backoff !== undefined) {
      Backoff.encode(message.backoff, writer.uint32(122).fork()).ldelim();
    }
    if (message.timeout !== 0) {
      writer.uint32(128).uint32(message.timeout);
    }
    if (message.repeat !== undefined) {
      Repeat.encode(message.repeat, writer.uint32(162).fork()).ldelim();
    }
    if (message.jobId !== "") {
      writer.uint32(170).string(message.jobId);
    }
    if (message.removeOnComplete === true) {
      writer.uint32(176).bool(message.removeOnComplete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JobOptions {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 13:
          message.priority = jobOptions_PriorityFromJSON(reader.int32());
          break;
        case 14:
          message.attempts = reader.uint32();
          break;
        case 15:
          message.backoff = Backoff.decode(reader, reader.uint32());
          break;
        case 16:
          message.timeout = reader.uint32();
          break;
        case 20:
          message.repeat = Repeat.decode(reader, reader.uint32());
          break;
        case 21:
          message.jobId = reader.string();
          break;
        case 22:
          message.removeOnComplete = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): JobOptions {
    return {
      priority: isSet(object.priority) ? jobOptions_PriorityFromJSON(object.priority) : JobOptions_Priority.NORMAL,
      attempts: isSet(object.attempts) ? Number(object.attempts) : 0,
      backoff: isSet(object.backoff) ? Backoff.fromJSON(object.backoff) : undefined,
      timeout: isSet(object.timeout) ? Number(object.timeout) : 0,
      repeat: isSet(object.repeat) ? Repeat.fromJSON(object.repeat) : undefined,
      jobId: isSet(object.jobId) ? String(object.jobId) : "",
      removeOnComplete: isSet(object.removeOnComplete) ? Boolean(object.removeOnComplete) : false,
    };
  },

  toJSON(message: JobOptions): unknown {
    const obj: any = {};
    message.priority !== undefined && (obj.priority = jobOptions_PriorityToJSON(message.priority));
    message.attempts !== undefined && (obj.attempts = Math.round(message.attempts));
    message.backoff !== undefined && (obj.backoff = message.backoff ? Backoff.toJSON(message.backoff) : undefined);
    message.timeout !== undefined && (obj.timeout = Math.round(message.timeout));
    message.repeat !== undefined && (obj.repeat = message.repeat ? Repeat.toJSON(message.repeat) : undefined);
    message.jobId !== undefined && (obj.jobId = message.jobId);
    message.removeOnComplete !== undefined && (obj.removeOnComplete = message.removeOnComplete);
    return obj;
  },

  create(base?: DeepPartial<JobOptions>): JobOptions {
    return JobOptions.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<JobOptions>): JobOptions {
    const message = createBaseJobOptions();
    message.priority = object.priority ?? JobOptions_Priority.NORMAL;
    message.attempts = object.attempts ?? 0;
    message.backoff = (object.backoff !== undefined && object.backoff !== null)
      ? Backoff.fromPartial(object.backoff)
      : undefined;
    message.timeout = object.timeout ?? 0;
    message.repeat = (object.repeat !== undefined && object.repeat !== null)
      ? Repeat.fromPartial(object.repeat)
      : undefined;
    message.jobId = object.jobId ?? "";
    message.removeOnComplete = object.removeOnComplete ?? false;
    return message;
  },
};

function createBaseRepeat(): Repeat {
  return { every: 0, cron: "", startDate: "", endDate: "", count: 0, jobId: "", tz: "" };
}

export const Repeat = {
  encode(message: Repeat, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.every !== 0) {
      writer.uint32(8).uint32(message.every);
    }
    if (message.cron !== "") {
      writer.uint32(18).string(message.cron);
    }
    if (message.startDate !== "") {
      writer.uint32(26).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(34).string(message.endDate);
    }
    if (message.count !== 0) {
      writer.uint32(40).uint32(message.count);
    }
    if (message.jobId !== "") {
      writer.uint32(50).string(message.jobId);
    }
    if (message.tz !== "") {
      writer.uint32(58).string(message.tz);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Repeat {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.every = reader.uint32();
          break;
        case 2:
          message.cron = reader.string();
          break;
        case 3:
          message.startDate = reader.string();
          break;
        case 4:
          message.endDate = reader.string();
          break;
        case 5:
          message.count = reader.uint32();
          break;
        case 6:
          message.jobId = reader.string();
          break;
        case 7:
          message.tz = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Repeat {
    return {
      every: isSet(object.every) ? Number(object.every) : 0,
      cron: isSet(object.cron) ? String(object.cron) : "",
      startDate: isSet(object.startDate) ? String(object.startDate) : "",
      endDate: isSet(object.endDate) ? String(object.endDate) : "",
      count: isSet(object.count) ? Number(object.count) : 0,
      jobId: isSet(object.jobId) ? String(object.jobId) : "",
      tz: isSet(object.tz) ? String(object.tz) : "",
    };
  },

  toJSON(message: Repeat): unknown {
    const obj: any = {};
    message.every !== undefined && (obj.every = Math.round(message.every));
    message.cron !== undefined && (obj.cron = message.cron);
    message.startDate !== undefined && (obj.startDate = message.startDate);
    message.endDate !== undefined && (obj.endDate = message.endDate);
    message.count !== undefined && (obj.count = Math.round(message.count));
    message.jobId !== undefined && (obj.jobId = message.jobId);
    message.tz !== undefined && (obj.tz = message.tz);
    return obj;
  },

  create(base?: DeepPartial<Repeat>): Repeat {
    return Repeat.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Repeat>): Repeat {
    const message = createBaseRepeat();
    message.every = object.every ?? 0;
    message.cron = object.cron ?? "";
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    message.count = object.count ?? 0;
    message.jobId = object.jobId ?? "";
    message.tz = object.tz ?? "";
    return message;
  },
};

function createBaseData(): Data {
  return { payload: undefined, meta: undefined, subjectId: "" };
}

export const Data = {
  encode(message: Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.payload !== undefined) {
      Any.encode(message.payload, writer.uint32(18).fork()).ldelim();
    }
    if (message.meta !== undefined) {
      Meta.encode(message.meta, writer.uint32(26).fork()).ldelim();
    }
    if (message.subjectId !== "") {
      writer.uint32(34).string(message.subjectId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Data {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          message.payload = Any.decode(reader, reader.uint32());
          break;
        case 3:
          message.meta = Meta.decode(reader, reader.uint32());
          break;
        case 4:
          message.subjectId = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Data {
    return {
      payload: isSet(object.payload) ? Any.fromJSON(object.payload) : undefined,
      meta: isSet(object.meta) ? Meta.fromJSON(object.meta) : undefined,
      subjectId: isSet(object.subjectId) ? String(object.subjectId) : "",
    };
  },

  toJSON(message: Data): unknown {
    const obj: any = {};
    message.payload !== undefined && (obj.payload = message.payload ? Any.toJSON(message.payload) : undefined);
    message.meta !== undefined && (obj.meta = message.meta ? Meta.toJSON(message.meta) : undefined);
    message.subjectId !== undefined && (obj.subjectId = message.subjectId);
    return obj;
  },

  create(base?: DeepPartial<Data>): Data {
    return Data.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Data>): Data {
    const message = createBaseData();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Any.fromPartial(object.payload)
      : undefined;
    message.meta = (object.meta !== undefined && object.meta !== null) ? Meta.fromPartial(object.meta) : undefined;
    message.subjectId = object.subjectId ?? "";
    return message;
  },
};

function createBaseScheduledJob(): ScheduledJob {
  return { id: "", type: "", data: undefined, scheduleType: "" };
}

export const ScheduledJob = {
  encode(message: ScheduledJob, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.data !== undefined) {
      Data.encode(message.data, writer.uint32(26).fork()).ldelim();
    }
    if (message.scheduleType !== "") {
      writer.uint32(34).string(message.scheduleType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ScheduledJob {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduledJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;
        case 2:
          message.type = reader.string();
          break;
        case 3:
          message.data = Data.decode(reader, reader.uint32());
          break;
        case 4:
          message.scheduleType = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ScheduledJob {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      type: isSet(object.type) ? String(object.type) : "",
      data: isSet(object.data) ? Data.fromJSON(object.data) : undefined,
      scheduleType: isSet(object.scheduleType) ? String(object.scheduleType) : "",
    };
  },

  toJSON(message: ScheduledJob): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.type !== undefined && (obj.type = message.type);
    message.data !== undefined && (obj.data = message.data ? Data.toJSON(message.data) : undefined);
    message.scheduleType !== undefined && (obj.scheduleType = message.scheduleType);
    return obj;
  },

  create(base?: DeepPartial<ScheduledJob>): ScheduledJob {
    return ScheduledJob.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<ScheduledJob>): ScheduledJob {
    const message = createBaseScheduledJob();
    message.id = object.id ?? "";
    message.type = object.type ?? "";
    message.data = (object.data !== undefined && object.data !== null) ? Data.fromPartial(object.data) : undefined;
    message.scheduleType = object.scheduleType ?? "";
    return message;
  },
};

function createBaseJobDone(): JobDone {
  return { id: "", scheduleType: "", deleteScheduled: false, type: "", result: undefined };
}

export const JobDone = {
  encode(message: JobDone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.scheduleType !== "") {
      writer.uint32(18).string(message.scheduleType);
    }
    if (message.deleteScheduled === true) {
      writer.uint32(24).bool(message.deleteScheduled);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.result !== undefined) {
      Any.encode(message.result, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JobDone {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobDone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;
        case 2:
          message.scheduleType = reader.string();
          break;
        case 3:
          message.deleteScheduled = reader.bool();
          break;
        case 4:
          message.type = reader.string();
          break;
        case 5:
          message.result = Any.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): JobDone {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      scheduleType: isSet(object.scheduleType) ? String(object.scheduleType) : "",
      deleteScheduled: isSet(object.deleteScheduled) ? Boolean(object.deleteScheduled) : false,
      type: isSet(object.type) ? String(object.type) : "",
      result: isSet(object.result) ? Any.fromJSON(object.result) : undefined,
    };
  },

  toJSON(message: JobDone): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.scheduleType !== undefined && (obj.scheduleType = message.scheduleType);
    message.deleteScheduled !== undefined && (obj.deleteScheduled = message.deleteScheduled);
    message.type !== undefined && (obj.type = message.type);
    message.result !== undefined && (obj.result = message.result ? Any.toJSON(message.result) : undefined);
    return obj;
  },

  create(base?: DeepPartial<JobDone>): JobDone {
    return JobDone.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<JobDone>): JobDone {
    const message = createBaseJobDone();
    message.id = object.id ?? "";
    message.scheduleType = object.scheduleType ?? "";
    message.deleteScheduled = object.deleteScheduled ?? false;
    message.type = object.type ?? "";
    message.result = (object.result !== undefined && object.result !== null)
      ? Any.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseJobFailed(): JobFailed {
  return { id: "", error: "", scheduleType: "", type: "" };
}

export const JobFailed = {
  encode(message: JobFailed, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    if (message.scheduleType !== "") {
      writer.uint32(26).string(message.scheduleType);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JobFailed {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobFailed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;
        case 2:
          message.error = reader.string();
          break;
        case 3:
          message.scheduleType = reader.string();
          break;
        case 4:
          message.type = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): JobFailed {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      error: isSet(object.error) ? String(object.error) : "",
      scheduleType: isSet(object.scheduleType) ? String(object.scheduleType) : "",
      type: isSet(object.type) ? String(object.type) : "",
    };
  },

  toJSON(message: JobFailed): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.error !== undefined && (obj.error = message.error);
    message.scheduleType !== undefined && (obj.scheduleType = message.scheduleType);
    message.type !== undefined && (obj.type = message.type);
    return obj;
  },

  create(base?: DeepPartial<JobFailed>): JobFailed {
    return JobFailed.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<JobFailed>): JobFailed {
    const message = createBaseJobFailed();
    message.id = object.id ?? "";
    message.error = object.error ?? "";
    message.scheduleType = object.scheduleType ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseBackoff(): Backoff {
  return { delay: 0, type: Backoff_Type.FIXED };
}

export const Backoff = {
  encode(message: Backoff, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.delay !== 0) {
      writer.uint32(9).double(message.delay);
    }
    if (message.type !== Backoff_Type.FIXED) {
      writer.uint32(16).int32(backoff_TypeToNumber(message.type));
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Backoff {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackoff();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.delay = reader.double();
          break;
        case 2:
          message.type = backoff_TypeFromJSON(reader.int32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Backoff {
    return {
      delay: isSet(object.delay) ? Number(object.delay) : 0,
      type: isSet(object.type) ? backoff_TypeFromJSON(object.type) : Backoff_Type.FIXED,
    };
  },

  toJSON(message: Backoff): unknown {
    const obj: any = {};
    message.delay !== undefined && (obj.delay = message.delay);
    message.type !== undefined && (obj.type = backoff_TypeToJSON(message.type));
    return obj;
  },

  create(base?: DeepPartial<Backoff>): Backoff {
    return Backoff.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Backoff>): Backoff {
    const message = createBaseBackoff();
    message.delay = object.delay ?? 0;
    message.type = object.type ?? Backoff_Type.FIXED;
    return message;
  },
};

function createBaseJobReadRequest(): JobReadRequest {
  return { limit: 0, sort: JobReadRequest_SortOrder.UNSORTED, filter: undefined, field: [], subject: undefined };
}

export const JobReadRequest = {
  encode(message: JobReadRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.limit !== 0) {
      writer.uint32(8).uint32(message.limit);
    }
    if (message.sort !== JobReadRequest_SortOrder.UNSORTED) {
      writer.uint32(16).int32(jobReadRequest_SortOrderToNumber(message.sort));
    }
    if (message.filter !== undefined) {
      JobFilter.encode(message.filter, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.field) {
      FieldFilter.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.subject !== undefined) {
      Subject.encode(message.subject, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JobReadRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobReadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.limit = reader.uint32();
          break;
        case 2:
          message.sort = jobReadRequest_SortOrderFromJSON(reader.int32());
          break;
        case 4:
          message.filter = JobFilter.decode(reader, reader.uint32());
          break;
        case 3:
          message.field.push(FieldFilter.decode(reader, reader.uint32()));
          break;
        case 5:
          message.subject = Subject.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): JobReadRequest {
    return {
      limit: isSet(object.limit) ? Number(object.limit) : 0,
      sort: isSet(object.sort) ? jobReadRequest_SortOrderFromJSON(object.sort) : JobReadRequest_SortOrder.UNSORTED,
      filter: isSet(object.filter) ? JobFilter.fromJSON(object.filter) : undefined,
      field: Array.isArray(object?.field) ? object.field.map((e: any) => FieldFilter.fromJSON(e)) : [],
      subject: isSet(object.subject) ? Subject.fromJSON(object.subject) : undefined,
    };
  },

  toJSON(message: JobReadRequest): unknown {
    const obj: any = {};
    message.limit !== undefined && (obj.limit = Math.round(message.limit));
    message.sort !== undefined && (obj.sort = jobReadRequest_SortOrderToJSON(message.sort));
    message.filter !== undefined && (obj.filter = message.filter ? JobFilter.toJSON(message.filter) : undefined);
    if (message.field) {
      obj.field = message.field.map((e) => e ? FieldFilter.toJSON(e) : undefined);
    } else {
      obj.field = [];
    }
    message.subject !== undefined && (obj.subject = message.subject ? Subject.toJSON(message.subject) : undefined);
    return obj;
  },

  create(base?: DeepPartial<JobReadRequest>): JobReadRequest {
    return JobReadRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<JobReadRequest>): JobReadRequest {
    const message = createBaseJobReadRequest();
    message.limit = object.limit ?? 0;
    message.sort = object.sort ?? JobReadRequest_SortOrder.UNSORTED;
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? JobFilter.fromPartial(object.filter)
      : undefined;
    message.field = object.field?.map((e) => FieldFilter.fromPartial(e)) || [];
    message.subject = (object.subject !== undefined && object.subject !== null)
      ? Subject.fromPartial(object.subject)
      : undefined;
    return message;
  },
};

function createBaseJobFilter(): JobFilter {
  return { jobIds: [], type: "" };
}

export const JobFilter = {
  encode(message: JobFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.jobIds) {
      writer.uint32(10).string(v!);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JobFilter {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.jobIds.push(reader.string());
          break;
        case 2:
          message.type = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): JobFilter {
    return {
      jobIds: Array.isArray(object?.jobIds) ? object.jobIds.map((e: any) => String(e)) : [],
      type: isSet(object.type) ? String(object.type) : "",
    };
  },

  toJSON(message: JobFilter): unknown {
    const obj: any = {};
    if (message.jobIds) {
      obj.jobIds = message.jobIds.map((e) => e);
    } else {
      obj.jobIds = [];
    }
    message.type !== undefined && (obj.type = message.type);
    return obj;
  },

  create(base?: DeepPartial<JobFilter>): JobFilter {
    return JobFilter.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<JobFilter>): JobFilter {
    const message = createBaseJobFilter();
    message.jobIds = object.jobIds?.map((e) => e) || [];
    message.type = object.type ?? "";
    return message;
  },
};

/**
 * The microservice for scheduling jobs.
 * Provides CRUD operations.
 */
export type ServiceDefinition = typeof ServiceDefinition;
export const ServiceDefinition = {
  name: "Service",
  fullName: "io.restorecommerce.job.Service",
  methods: {
    read: {
      name: "Read",
      requestType: JobReadRequest,
      requestStream: false,
      responseType: JobListResponse,
      responseStream: false,
      options: {},
    },
    create: {
      name: "Create",
      requestType: JobList,
      requestStream: false,
      responseType: JobListResponse,
      responseStream: false,
      options: {},
    },
    delete: {
      name: "Delete",
      requestType: DeleteRequest,
      requestStream: false,
      responseType: DeleteResponse,
      responseStream: false,
      options: {},
    },
    update: {
      name: "Update",
      requestType: JobList,
      requestStream: false,
      responseType: JobListResponse,
      responseStream: false,
      options: {},
    },
    upsert: {
      name: "Upsert",
      requestType: JobList,
      requestStream: false,
      responseType: JobListResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ServiceImplementation<CallContextExt = {}> {
  read(request: JobReadRequest, context: CallContext & CallContextExt): Promise<DeepPartial<JobListResponse>>;
  create(request: JobList, context: CallContext & CallContextExt): Promise<DeepPartial<JobListResponse>>;
  delete(request: DeleteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DeleteResponse>>;
  update(request: JobList, context: CallContext & CallContextExt): Promise<DeepPartial<JobListResponse>>;
  upsert(request: JobList, context: CallContext & CallContextExt): Promise<DeepPartial<JobListResponse>>;
}

export interface ServiceClient<CallOptionsExt = {}> {
  read(request: DeepPartial<JobReadRequest>, options?: CallOptions & CallOptionsExt): Promise<JobListResponse>;
  create(request: DeepPartial<JobList>, options?: CallOptions & CallOptionsExt): Promise<JobListResponse>;
  delete(request: DeepPartial<DeleteRequest>, options?: CallOptions & CallOptionsExt): Promise<DeleteResponse>;
  update(request: DeepPartial<JobList>, options?: CallOptions & CallOptionsExt): Promise<JobListResponse>;
  upsert(request: DeepPartial<JobList>, options?: CallOptions & CallOptionsExt): Promise<JobListResponse>;
}

type ProtoMetaMessageOptions = {
  options?: { [key: string]: any };
  fields?: { [key: string]: { [key: string]: any } };
  oneof?: { [key: string]: { [key: string]: any } };
  nested?: { [key: string]: ProtoMetaMessageOptions };
};

export interface ProtoMetadata {
  fileDescriptor: FileDescriptorProto1;
  references: { [key: string]: any };
  dependencies?: ProtoMetadata[];
  options?: {
    options?: { [key: string]: any };
    services?: {
      [key: string]: { options?: { [key: string]: any }; methods?: { [key: string]: { [key: string]: any } } };
    };
    messages?: { [key: string]: ProtoMetaMessageOptions };
    enums?: { [key: string]: { options?: { [key: string]: any }; values?: { [key: string]: { [key: string]: any } } } };
  };
}

export const protoMetadata: ProtoMetadata = {
  fileDescriptor: FileDescriptorProto1.fromPartial({
    "name": "io/restorecommerce/job.proto",
    "package": "io.restorecommerce.job",
    "dependency": [
      "io/restorecommerce/resource_base.proto",
      "google/protobuf/any.proto",
      "io/restorecommerce/meta.proto",
      "io/restorecommerce/auth.proto",
      "io/restorecommerce/status.proto",
      "io/restorecommerce/options.proto",
    ],
    "publicDependency": [],
    "weakDependency": [],
    "messageType": [{
      "name": "Deleted",
      "field": [{
        "name": "id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "id",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "JobList",
      "field": [{
        "name": "items",
        "number": 1,
        "label": 3,
        "type": 11,
        "typeName": ".io.restorecommerce.job.Job",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "items",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "total_count",
        "number": 2,
        "label": 1,
        "type": 13,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "totalCount",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "subject",
        "number": 3,
        "label": 1,
        "type": 11,
        "typeName": ".io.restorecommerce.auth.Subject",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "subject",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "JobListResponse",
      "field": [{
        "name": "items",
        "number": 1,
        "label": 3,
        "type": 11,
        "typeName": ".io.restorecommerce.job.JobResponse",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "items",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "total_count",
        "number": 2,
        "label": 1,
        "type": 13,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "totalCount",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "operation_status",
        "number": 3,
        "label": 1,
        "type": 11,
        "typeName": ".io.restorecommerce.status.OperationStatus",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "operationStatus",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "JobResponse",
      "field": [{
        "name": "payload",
        "number": 1,
        "label": 1,
        "type": 11,
        "typeName": ".io.restorecommerce.job.Job",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "payload",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "status",
        "number": 2,
        "label": 1,
        "type": 11,
        "typeName": ".io.restorecommerce.status.Status",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "status",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "Job",
      "field": [{
        "name": "id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "id",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "type",
        "number": 11,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "type",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "data",
        "number": 12,
        "label": 1,
        "type": 11,
        "typeName": ".io.restorecommerce.job.Data",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "data",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "when",
        "number": 21,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "when",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "options",
        "number": 30,
        "label": 1,
        "type": 11,
        "typeName": ".io.restorecommerce.job.JobOptions",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "options",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "JobOptions",
      "field": [{
        "name": "priority",
        "number": 13,
        "label": 1,
        "type": 14,
        "typeName": ".io.restorecommerce.job.JobOptions.Priority",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "priority",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "attempts",
        "number": 14,
        "label": 1,
        "type": 13,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "attempts",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "backoff",
        "number": 15,
        "label": 1,
        "type": 11,
        "typeName": ".io.restorecommerce.job.Backoff",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "backoff",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "timeout",
        "number": 16,
        "label": 1,
        "type": 13,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "timeout",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "repeat",
        "number": 20,
        "label": 1,
        "type": 11,
        "typeName": ".io.restorecommerce.job.Repeat",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "repeat",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "jobId",
        "number": 21,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "jobId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "removeOnComplete",
        "number": 22,
        "label": 1,
        "type": 8,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "removeOnComplete",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [{
        "name": "Priority",
        "value": [
          { "name": "NORMAL", "number": 0, "options": undefined },
          { "name": "LOW", "number": 10, "options": undefined },
          { "name": "MEDIUM", "number": -5, "options": undefined },
          { "name": "HIGH", "number": -10, "options": undefined },
          { "name": "CRITICAL", "number": -15, "options": undefined },
        ],
        "options": undefined,
        "reservedRange": [],
        "reservedName": [],
      }],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "Repeat",
      "field": [{
        "name": "every",
        "number": 1,
        "label": 1,
        "type": 13,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "every",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "cron",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "cron",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "startDate",
        "number": 3,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "startDate",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "endDate",
        "number": 4,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "endDate",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "count",
        "number": 5,
        "label": 1,
        "type": 13,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "count",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "jobId",
        "number": 6,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "jobId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "tz",
        "number": 7,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "tz",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "Data",
      "field": [{
        "name": "payload",
        "number": 2,
        "label": 1,
        "type": 11,
        "typeName": ".google.protobuf.Any",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "payload",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "meta",
        "number": 3,
        "label": 1,
        "type": 11,
        "typeName": ".io.restorecommerce.meta.Meta",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "meta",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "subject_id",
        "number": 4,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "subjectId",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "ScheduledJob",
      "field": [{
        "name": "id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "id",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "type",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "type",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "data",
        "number": 3,
        "label": 1,
        "type": 11,
        "typeName": ".io.restorecommerce.job.Data",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "data",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "schedule_type",
        "number": 4,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "scheduleType",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "JobDone",
      "field": [{
        "name": "id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "id",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "schedule_type",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "scheduleType",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "delete_scheduled",
        "number": 3,
        "label": 1,
        "type": 8,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "deleteScheduled",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "type",
        "number": 4,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "type",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "result",
        "number": 5,
        "label": 1,
        "type": 11,
        "typeName": ".google.protobuf.Any",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "result",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "JobFailed",
      "field": [{
        "name": "id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "id",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "error",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "error",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "schedule_type",
        "number": 3,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "scheduleType",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "type",
        "number": 4,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "type",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "Backoff",
      "field": [{
        "name": "delay",
        "number": 1,
        "label": 1,
        "type": 1,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "delay",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "type",
        "number": 2,
        "label": 1,
        "type": 14,
        "typeName": ".io.restorecommerce.job.Backoff.Type",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "type",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [{
        "name": "Type",
        "value": [{ "name": "FIXED", "number": 0, "options": undefined }, {
          "name": "EXPONENTIAL",
          "number": 1,
          "options": undefined,
        }],
        "options": undefined,
        "reservedRange": [],
        "reservedName": [],
      }],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "JobReadRequest",
      "field": [{
        "name": "limit",
        "number": 1,
        "label": 1,
        "type": 13,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "limit",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "sort",
        "number": 2,
        "label": 1,
        "type": 14,
        "typeName": ".io.restorecommerce.job.JobReadRequest.SortOrder",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sort",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "filter",
        "number": 4,
        "label": 1,
        "type": 11,
        "typeName": ".io.restorecommerce.job.JobFilter",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "filter",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "field",
        "number": 3,
        "label": 3,
        "type": 11,
        "typeName": ".io.restorecommerce.resourcebase.FieldFilter",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "field",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "subject",
        "number": 5,
        "label": 1,
        "type": 11,
        "typeName": ".io.restorecommerce.auth.Subject",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "subject",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [{
        "name": "SortOrder",
        "value": [{ "name": "UNSORTED", "number": 0, "options": undefined }, {
          "name": "ASCENDING",
          "number": 1,
          "options": undefined,
        }, { "name": "DESCENDING", "number": 2, "options": undefined }],
        "options": undefined,
        "reservedRange": [],
        "reservedName": [],
      }],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "JobFilter",
      "field": [{
        "name": "job_ids",
        "number": 1,
        "label": 3,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "jobIds",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "type",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "type",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }],
    "enumType": [],
    "service": [{
      "name": "Service",
      "method": [{
        "name": "Read",
        "inputType": ".io.restorecommerce.job.JobReadRequest",
        "outputType": ".io.restorecommerce.job.JobListResponse",
        "options": { "deprecated": false, "idempotencyLevel": 0, "uninterpretedOption": [] },
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "Create",
        "inputType": ".io.restorecommerce.job.JobList",
        "outputType": ".io.restorecommerce.job.JobListResponse",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "Delete",
        "inputType": ".io.restorecommerce.resourcebase.DeleteRequest",
        "outputType": ".io.restorecommerce.resourcebase.DeleteResponse",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "Update",
        "inputType": ".io.restorecommerce.job.JobList",
        "outputType": ".io.restorecommerce.job.JobListResponse",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "Upsert",
        "inputType": ".io.restorecommerce.job.JobList",
        "outputType": ".io.restorecommerce.job.JobListResponse",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }],
      "options": { "deprecated": false, "uninterpretedOption": [] },
    }],
    "extension": [],
    "options": undefined,
    "sourceCodeInfo": {
      "location": [{
        "path": [6, 0],
        "span": [15, 0, 25, 1],
        "leadingComments": "*\n The microservice for scheduling jobs.\n Provides CRUD operations.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 0],
        "span": [31, 0, 33, 1],
        "leadingComments": "*\n A Kafka event.\n Send when a job resource got deleted.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 1],
        "span": [38, 0, 42, 1],
        "leadingComments": "*\n A list of jobs.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4],
        "span": [58, 0, 67, 1],
        "leadingComments": "*\n A Job resource\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4, 2, 0],
        "span": [59, 2, 16],
        "leadingComments": "",
        "trailingComments": " Job ID\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4, 2, 1],
        "span": [61, 2, 19],
        "leadingComments": "",
        "trailingComments": " Job type\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4, 2, 2],
        "span": [62, 2, 17],
        "leadingComments": "",
        "trailingComments": " Job-specific data with variable payload\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4, 2, 3],
        "span": [64, 2, 19],
        "leadingComments": "",
        "trailingComments": " Used to specify the time at which the job is run\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4, 2, 4],
        "span": [66, 2, 26],
        "leadingComments": "",
        "trailingComments": " The job options\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5],
        "span": [72, 0, 89, 1],
        "leadingComments": "*\n Job Options\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 0],
        "span": [81, 2, 25],
        "leadingComments": "",
        "trailingComments": " Job priority\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 1],
        "span": [82, 2, 23],
        "leadingComments": "",
        "trailingComments": " Amount of possible failing runs until job fails\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 2],
        "span": [83, 2, 23],
        "leadingComments": "",
        "trailingComments": " Delay settings between failed job runs\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 3],
        "span": [84, 2, 22],
        "leadingComments": "",
        "trailingComments": " The number of milliseconds after which the job should be fail with a timeout error\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 4],
        "span": [86, 2, 21],
        "leadingComments": "",
        "trailingComments": " Used for periodic jobs\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 5],
        "span": [87, 2, 20],
        "leadingComments": "",
        "trailingComments": " To override the job ID - by default, the job ID is a unique generated by bull\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 6],
        "span": [88, 2, 29],
        "leadingComments": "",
        "trailingComments": " If true, removes the job when it successfully completes\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 6, 2, 5],
        "span": [97, 2, 19],
        "leadingComments": "",
        "trailingComments": " To override the job ID - by default, the job ID is a unique generated by bull\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 6, 2, 6],
        "span": [98, 2, 16],
        "leadingComments": "",
        "trailingComments": " time zone\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 7],
        "span": [102, 0, 106, 1],
        "leadingComments": " Data which is stored within a job instance\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 7, 2, 0],
        "span": [103, 2, 34],
        "leadingComments": "",
        "trailingComments": " optional variable payload\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 7, 2, 2],
        "span": [105, 2, 24],
        "leadingComments": "",
        "trailingComments": " id of job creator\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8],
        "span": [112, 0, 117, 1],
        "leadingComments":
          "*\n A scheduled Job.\n Emitted to Kafka by the scheduling service with event name 'queuedJob' and retreived by a service which processes this job.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 0],
        "span": [113, 2, 16],
        "leadingComments": "",
        "trailingComments": " Job instance ID\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 2],
        "span": [115, 2, 16],
        "leadingComments": "",
        "trailingComments": " Job-specific data with variable payload\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 3],
        "span": [116, 2, 27],
        "leadingComments": "",
        "trailingComments": " Type of schedule (ONCE, RECURR, etc)\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 9],
        "span": [123, 0, 129, 1],
        "leadingComments":
          "*\n A finished scheduled Job.\n Emitted to Kafka by the service which processed the job with event name 'done' and retrieved by the scheduling service.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 9, 2, 0],
        "span": [124, 2, 16],
        "leadingComments": "",
        "trailingComments": " Job instance ID\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 9, 2, 1],
        "span": [125, 2, 27],
        "leadingComments": "",
        "trailingComments": " Type of schedule (ONCE, RECURR, etc)\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 9, 2, 2],
        "span": [126, 2, 28],
        "leadingComments": "",
        "trailingComments": " Whether to delete scheduled job\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 9, 2, 3],
        "span": [127, 2, 18],
        "leadingComments": "",
        "trailingComments": " Job type\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 10],
        "span": [135, 0, 140, 1],
        "leadingComments":
          "*\n A failed scheduled Job event from the Job Service.\n Emitted to Kafka by the service which processed the Job and retrieved by the scheduling service.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 10, 2, 0],
        "span": [136, 2, 16],
        "leadingComments": "",
        "trailingComments": " Job instance ID\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 10, 2, 1],
        "span": [137, 2, 19],
        "leadingComments": "",
        "trailingComments": " Error message\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 10, 2, 2],
        "span": [138, 2, 27],
        "leadingComments": "",
        "trailingComments": " Type of job ex: ONCE, RECURR etc.\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 10, 2, 3],
        "span": [139, 2, 18],
        "leadingComments": "",
        "trailingComments": " Job type\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 11],
        "span": [145, 0, 152, 1],
        "leadingComments": "*\n Delay between retries.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 11, 4, 0, 2, 0],
        "span": [147, 4, 14],
        "leadingComments": "",
        "trailingComments": " Retry with the same delay\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 11, 4, 0, 2, 1],
        "span": [148, 4, 20],
        "leadingComments": "",
        "trailingComments": " Exponential delay increase between retries\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 11, 2, 0],
        "span": [150, 2, 19],
        "leadingComments": "",
        "trailingComments": " Time until retry in milliseconds\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 11, 2, 1],
        "span": [151, 2, 16],
        "leadingComments": "",
        "trailingComments": " Calculation of the delay\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 12],
        "span": [155, 0, 171, 1],
        "leadingComments": " Job-specific read request\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 12, 4, 0],
        "span": [158, 2, 162, 3],
        "leadingComments": " only possible to sort jobs by creation date\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 12, 2, 2],
        "span": [166, 2, 23],
        "leadingComments": " Filter based on fieldName|operation, value|list\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 12, 2, 3],
        "span": [169, 2, 65],
        "leadingComments": " Fields selector\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 13],
        "span": [174, 0, 177, 1],
        "leadingComments": " filter\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }],
    },
    "syntax": "proto3",
  }),
  references: {
    ".io.restorecommerce.job.Deleted": Deleted,
    ".io.restorecommerce.job.JobList": JobList,
    ".io.restorecommerce.job.JobListResponse": JobListResponse,
    ".io.restorecommerce.job.JobResponse": JobResponse,
    ".io.restorecommerce.job.Job": Job,
    ".io.restorecommerce.job.JobOptions": JobOptions,
    ".io.restorecommerce.job.JobOptions.Priority": JobOptions_Priority,
    ".io.restorecommerce.job.Repeat": Repeat,
    ".io.restorecommerce.job.Data": Data,
    ".io.restorecommerce.job.ScheduledJob": ScheduledJob,
    ".io.restorecommerce.job.JobDone": JobDone,
    ".io.restorecommerce.job.JobFailed": JobFailed,
    ".io.restorecommerce.job.Backoff": Backoff,
    ".io.restorecommerce.job.Backoff.Type": Backoff_Type,
    ".io.restorecommerce.job.JobReadRequest": JobReadRequest,
    ".io.restorecommerce.job.JobReadRequest.SortOrder": JobReadRequest_SortOrder,
    ".io.restorecommerce.job.JobFilter": JobFilter,
  },
  dependencies: [protoMetadata1, protoMetadata2, protoMetadata3, protoMetadata4, protoMetadata5, protoMetadata6],
  options: {
    services: { "Service": { options: { "service_name": "job" }, methods: { "Read": { "is_query": true } } } },
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
